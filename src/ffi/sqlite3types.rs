/* automatically generated by rust-bindgen 0.60.1 */

#![allow(non_snake_case)]
#![allow(dead_code)]
#![allow(non_camel_case_types)]

pub const SQLITE_VERSION: &[u8; 7usize] = b"3.38.5\0";
pub const SQLITE_VERSION_NUMBER: i32 = 3038005;
pub const SQLITE_SOURCE_ID: &[u8; 85usize] =
    b"2022-05-06 15:25:27 78d9c993d404cdfaa7fdd2973fa1052e3da9f66215cff9c5540ebe55c407d9fe\0";
pub const SQLITE_OK: i32 = 0;
pub const SQLITE_ERROR: i32 = 1;
pub const SQLITE_INTERNAL: i32 = 2;
pub const SQLITE_PERM: i32 = 3;
pub const SQLITE_ABORT: i32 = 4;
pub const SQLITE_BUSY: i32 = 5;
pub const SQLITE_LOCKED: i32 = 6;
pub const SQLITE_NOMEM: i32 = 7;
pub const SQLITE_READONLY: i32 = 8;
pub const SQLITE_INTERRUPT: i32 = 9;
pub const SQLITE_IOERR: i32 = 10;
pub const SQLITE_CORRUPT: i32 = 11;
pub const SQLITE_NOTFOUND: i32 = 12;
pub const SQLITE_FULL: i32 = 13;
pub const SQLITE_CANTOPEN: i32 = 14;
pub const SQLITE_PROTOCOL: i32 = 15;
pub const SQLITE_EMPTY: i32 = 16;
pub const SQLITE_SCHEMA: i32 = 17;
pub const SQLITE_TOOBIG: i32 = 18;
pub const SQLITE_CONSTRAINT: i32 = 19;
pub const SQLITE_MISMATCH: i32 = 20;
pub const SQLITE_MISUSE: i32 = 21;
pub const SQLITE_NOLFS: i32 = 22;
pub const SQLITE_AUTH: i32 = 23;
pub const SQLITE_FORMAT: i32 = 24;
pub const SQLITE_RANGE: i32 = 25;
pub const SQLITE_NOTADB: i32 = 26;
pub const SQLITE_NOTICE: i32 = 27;
pub const SQLITE_WARNING: i32 = 28;
pub const SQLITE_ROW: i32 = 100;
pub const SQLITE_DONE: i32 = 101;
pub const SQLITE_ERROR_MISSING_COLLSEQ: i32 = 257;
pub const SQLITE_ERROR_RETRY: i32 = 513;
pub const SQLITE_ERROR_SNAPSHOT: i32 = 769;
pub const SQLITE_IOERR_READ: i32 = 266;
pub const SQLITE_IOERR_SHORT_READ: i32 = 522;
pub const SQLITE_IOERR_WRITE: i32 = 778;
pub const SQLITE_IOERR_FSYNC: i32 = 1034;
pub const SQLITE_IOERR_DIR_FSYNC: i32 = 1290;
pub const SQLITE_IOERR_TRUNCATE: i32 = 1546;
pub const SQLITE_IOERR_FSTAT: i32 = 1802;
pub const SQLITE_IOERR_UNLOCK: i32 = 2058;
pub const SQLITE_IOERR_RDLOCK: i32 = 2314;
pub const SQLITE_IOERR_DELETE: i32 = 2570;
pub const SQLITE_IOERR_BLOCKED: i32 = 2826;
pub const SQLITE_IOERR_NOMEM: i32 = 3082;
pub const SQLITE_IOERR_ACCESS: i32 = 3338;
pub const SQLITE_IOERR_CHECKRESERVEDLOCK: i32 = 3594;
pub const SQLITE_IOERR_LOCK: i32 = 3850;
pub const SQLITE_IOERR_CLOSE: i32 = 4106;
pub const SQLITE_IOERR_DIR_CLOSE: i32 = 4362;
pub const SQLITE_IOERR_SHMOPEN: i32 = 4618;
pub const SQLITE_IOERR_SHMSIZE: i32 = 4874;
pub const SQLITE_IOERR_SHMLOCK: i32 = 5130;
pub const SQLITE_IOERR_SHMMAP: i32 = 5386;
pub const SQLITE_IOERR_SEEK: i32 = 5642;
pub const SQLITE_IOERR_DELETE_NOENT: i32 = 5898;
pub const SQLITE_IOERR_MMAP: i32 = 6154;
pub const SQLITE_IOERR_GETTEMPPATH: i32 = 6410;
pub const SQLITE_IOERR_CONVPATH: i32 = 6666;
pub const SQLITE_IOERR_VNODE: i32 = 6922;
pub const SQLITE_IOERR_AUTH: i32 = 7178;
pub const SQLITE_IOERR_BEGIN_ATOMIC: i32 = 7434;
pub const SQLITE_IOERR_COMMIT_ATOMIC: i32 = 7690;
pub const SQLITE_IOERR_ROLLBACK_ATOMIC: i32 = 7946;
pub const SQLITE_IOERR_DATA: i32 = 8202;
pub const SQLITE_IOERR_CORRUPTFS: i32 = 8458;
pub const SQLITE_LOCKED_SHAREDCACHE: i32 = 262;
pub const SQLITE_LOCKED_VTAB: i32 = 518;
pub const SQLITE_BUSY_RECOVERY: i32 = 261;
pub const SQLITE_BUSY_SNAPSHOT: i32 = 517;
pub const SQLITE_BUSY_TIMEOUT: i32 = 773;
pub const SQLITE_CANTOPEN_NOTEMPDIR: i32 = 270;
pub const SQLITE_CANTOPEN_ISDIR: i32 = 526;
pub const SQLITE_CANTOPEN_FULLPATH: i32 = 782;
pub const SQLITE_CANTOPEN_CONVPATH: i32 = 1038;
pub const SQLITE_CANTOPEN_DIRTYWAL: i32 = 1294;
pub const SQLITE_CANTOPEN_SYMLINK: i32 = 1550;
pub const SQLITE_CORRUPT_VTAB: i32 = 267;
pub const SQLITE_CORRUPT_SEQUENCE: i32 = 523;
pub const SQLITE_CORRUPT_INDEX: i32 = 779;
pub const SQLITE_READONLY_RECOVERY: i32 = 264;
pub const SQLITE_READONLY_CANTLOCK: i32 = 520;
pub const SQLITE_READONLY_ROLLBACK: i32 = 776;
pub const SQLITE_READONLY_DBMOVED: i32 = 1032;
pub const SQLITE_READONLY_CANTINIT: i32 = 1288;
pub const SQLITE_READONLY_DIRECTORY: i32 = 1544;
pub const SQLITE_ABORT_ROLLBACK: i32 = 516;
pub const SQLITE_CONSTRAINT_CHECK: i32 = 275;
pub const SQLITE_CONSTRAINT_COMMITHOOK: i32 = 531;
pub const SQLITE_CONSTRAINT_FOREIGNKEY: i32 = 787;
pub const SQLITE_CONSTRAINT_FUNCTION: i32 = 1043;
pub const SQLITE_CONSTRAINT_NOTNULL: i32 = 1299;
pub const SQLITE_CONSTRAINT_PRIMARYKEY: i32 = 1555;
pub const SQLITE_CONSTRAINT_TRIGGER: i32 = 1811;
pub const SQLITE_CONSTRAINT_UNIQUE: i32 = 2067;
pub const SQLITE_CONSTRAINT_VTAB: i32 = 2323;
pub const SQLITE_CONSTRAINT_ROWID: i32 = 2579;
pub const SQLITE_CONSTRAINT_PINNED: i32 = 2835;
pub const SQLITE_CONSTRAINT_DATATYPE: i32 = 3091;
pub const SQLITE_NOTICE_RECOVER_WAL: i32 = 283;
pub const SQLITE_NOTICE_RECOVER_ROLLBACK: i32 = 539;
pub const SQLITE_WARNING_AUTOINDEX: i32 = 284;
pub const SQLITE_AUTH_USER: i32 = 279;
pub const SQLITE_OK_LOAD_PERMANENTLY: i32 = 256;
pub const SQLITE_OK_SYMLINK: i32 = 512;
pub const SQLITE_OPEN_READONLY: i32 = 1;
pub const SQLITE_OPEN_READWRITE: i32 = 2;
pub const SQLITE_OPEN_CREATE: i32 = 4;
pub const SQLITE_OPEN_DELETEONCLOSE: i32 = 8;
pub const SQLITE_OPEN_EXCLUSIVE: i32 = 16;
pub const SQLITE_OPEN_AUTOPROXY: i32 = 32;
pub const SQLITE_OPEN_URI: i32 = 64;
pub const SQLITE_OPEN_MEMORY: i32 = 128;
pub const SQLITE_OPEN_MAIN_DB: i32 = 256;
pub const SQLITE_OPEN_TEMP_DB: i32 = 512;
pub const SQLITE_OPEN_TRANSIENT_DB: i32 = 1024;
pub const SQLITE_OPEN_MAIN_JOURNAL: i32 = 2048;
pub const SQLITE_OPEN_TEMP_JOURNAL: i32 = 4096;
pub const SQLITE_OPEN_SUBJOURNAL: i32 = 8192;
pub const SQLITE_OPEN_SUPER_JOURNAL: i32 = 16384;
pub const SQLITE_OPEN_NOMUTEX: i32 = 32768;
pub const SQLITE_OPEN_FULLMUTEX: i32 = 65536;
pub const SQLITE_OPEN_SHAREDCACHE: i32 = 131072;
pub const SQLITE_OPEN_PRIVATECACHE: i32 = 262144;
pub const SQLITE_OPEN_WAL: i32 = 524288;
pub const SQLITE_OPEN_NOFOLLOW: i32 = 16777216;
pub const SQLITE_OPEN_EXRESCODE: i32 = 33554432;
pub const SQLITE_OPEN_MASTER_JOURNAL: i32 = 16384;
pub const SQLITE_IOCAP_ATOMIC: i32 = 1;
pub const SQLITE_IOCAP_ATOMIC512: i32 = 2;
pub const SQLITE_IOCAP_ATOMIC1K: i32 = 4;
pub const SQLITE_IOCAP_ATOMIC2K: i32 = 8;
pub const SQLITE_IOCAP_ATOMIC4K: i32 = 16;
pub const SQLITE_IOCAP_ATOMIC8K: i32 = 32;
pub const SQLITE_IOCAP_ATOMIC16K: i32 = 64;
pub const SQLITE_IOCAP_ATOMIC32K: i32 = 128;
pub const SQLITE_IOCAP_ATOMIC64K: i32 = 256;
pub const SQLITE_IOCAP_SAFE_APPEND: i32 = 512;
pub const SQLITE_IOCAP_SEQUENTIAL: i32 = 1024;
pub const SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN: i32 = 2048;
pub const SQLITE_IOCAP_POWERSAFE_OVERWRITE: i32 = 4096;
pub const SQLITE_IOCAP_IMMUTABLE: i32 = 8192;
pub const SQLITE_IOCAP_BATCH_ATOMIC: i32 = 16384;
pub const SQLITE_LOCK_NONE: i32 = 0;
pub const SQLITE_LOCK_SHARED: i32 = 1;
pub const SQLITE_LOCK_RESERVED: i32 = 2;
pub const SQLITE_LOCK_PENDING: i32 = 3;
pub const SQLITE_LOCK_EXCLUSIVE: i32 = 4;
pub const SQLITE_SYNC_NORMAL: i32 = 2;
pub const SQLITE_SYNC_FULL: i32 = 3;
pub const SQLITE_SYNC_DATAONLY: i32 = 16;
pub const SQLITE_FCNTL_LOCKSTATE: i32 = 1;
pub const SQLITE_FCNTL_GET_LOCKPROXYFILE: i32 = 2;
pub const SQLITE_FCNTL_SET_LOCKPROXYFILE: i32 = 3;
pub const SQLITE_FCNTL_LAST_ERRNO: i32 = 4;
pub const SQLITE_FCNTL_SIZE_HINT: i32 = 5;
pub const SQLITE_FCNTL_CHUNK_SIZE: i32 = 6;
pub const SQLITE_FCNTL_FILE_POINTER: i32 = 7;
pub const SQLITE_FCNTL_SYNC_OMITTED: i32 = 8;
pub const SQLITE_FCNTL_WIN32_AV_RETRY: i32 = 9;
pub const SQLITE_FCNTL_PERSIST_WAL: i32 = 10;
pub const SQLITE_FCNTL_OVERWRITE: i32 = 11;
pub const SQLITE_FCNTL_VFSNAME: i32 = 12;
pub const SQLITE_FCNTL_POWERSAFE_OVERWRITE: i32 = 13;
pub const SQLITE_FCNTL_PRAGMA: i32 = 14;
pub const SQLITE_FCNTL_BUSYHANDLER: i32 = 15;
pub const SQLITE_FCNTL_TEMPFILENAME: i32 = 16;
pub const SQLITE_FCNTL_MMAP_SIZE: i32 = 18;
pub const SQLITE_FCNTL_TRACE: i32 = 19;
pub const SQLITE_FCNTL_HAS_MOVED: i32 = 20;
pub const SQLITE_FCNTL_SYNC: i32 = 21;
pub const SQLITE_FCNTL_COMMIT_PHASETWO: i32 = 22;
pub const SQLITE_FCNTL_WIN32_SET_HANDLE: i32 = 23;
pub const SQLITE_FCNTL_WAL_BLOCK: i32 = 24;
pub const SQLITE_FCNTL_ZIPVFS: i32 = 25;
pub const SQLITE_FCNTL_RBU: i32 = 26;
pub const SQLITE_FCNTL_VFS_POINTER: i32 = 27;
pub const SQLITE_FCNTL_JOURNAL_POINTER: i32 = 28;
pub const SQLITE_FCNTL_WIN32_GET_HANDLE: i32 = 29;
pub const SQLITE_FCNTL_PDB: i32 = 30;
pub const SQLITE_FCNTL_BEGIN_ATOMIC_WRITE: i32 = 31;
pub const SQLITE_FCNTL_COMMIT_ATOMIC_WRITE: i32 = 32;
pub const SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE: i32 = 33;
pub const SQLITE_FCNTL_LOCK_TIMEOUT: i32 = 34;
pub const SQLITE_FCNTL_DATA_VERSION: i32 = 35;
pub const SQLITE_FCNTL_SIZE_LIMIT: i32 = 36;
pub const SQLITE_FCNTL_CKPT_DONE: i32 = 37;
pub const SQLITE_FCNTL_RESERVE_BYTES: i32 = 38;
pub const SQLITE_FCNTL_CKPT_START: i32 = 39;
pub const SQLITE_FCNTL_EXTERNAL_READER: i32 = 40;
pub const SQLITE_FCNTL_CKSM_FILE: i32 = 41;
pub const SQLITE_GET_LOCKPROXYFILE: i32 = 2;
pub const SQLITE_SET_LOCKPROXYFILE: i32 = 3;
pub const SQLITE_LAST_ERRNO: i32 = 4;
pub const SQLITE_ACCESS_EXISTS: i32 = 0;
pub const SQLITE_ACCESS_READWRITE: i32 = 1;
pub const SQLITE_ACCESS_READ: i32 = 2;
pub const SQLITE_SHM_UNLOCK: i32 = 1;
pub const SQLITE_SHM_LOCK: i32 = 2;
pub const SQLITE_SHM_SHARED: i32 = 4;
pub const SQLITE_SHM_EXCLUSIVE: i32 = 8;
pub const SQLITE_SHM_NLOCK: i32 = 8;
pub const SQLITE_CONFIG_SINGLETHREAD: i32 = 1;
pub const SQLITE_CONFIG_MULTITHREAD: i32 = 2;
pub const SQLITE_CONFIG_SERIALIZED: i32 = 3;
pub const SQLITE_CONFIG_MALLOC: i32 = 4;
pub const SQLITE_CONFIG_GETMALLOC: i32 = 5;
pub const SQLITE_CONFIG_SCRATCH: i32 = 6;
pub const SQLITE_CONFIG_PAGECACHE: i32 = 7;
pub const SQLITE_CONFIG_HEAP: i32 = 8;
pub const SQLITE_CONFIG_MEMSTATUS: i32 = 9;
pub const SQLITE_CONFIG_MUTEX: i32 = 10;
pub const SQLITE_CONFIG_GETMUTEX: i32 = 11;
pub const SQLITE_CONFIG_LOOKASIDE: i32 = 13;
pub const SQLITE_CONFIG_PCACHE: i32 = 14;
pub const SQLITE_CONFIG_GETPCACHE: i32 = 15;
pub const SQLITE_CONFIG_LOG: i32 = 16;
pub const SQLITE_CONFIG_URI: i32 = 17;
pub const SQLITE_CONFIG_PCACHE2: i32 = 18;
pub const SQLITE_CONFIG_GETPCACHE2: i32 = 19;
pub const SQLITE_CONFIG_COVERING_INDEX_SCAN: i32 = 20;
pub const SQLITE_CONFIG_SQLLOG: i32 = 21;
pub const SQLITE_CONFIG_MMAP_SIZE: i32 = 22;
pub const SQLITE_CONFIG_WIN32_HEAPSIZE: i32 = 23;
pub const SQLITE_CONFIG_PCACHE_HDRSZ: i32 = 24;
pub const SQLITE_CONFIG_PMASZ: i32 = 25;
pub const SQLITE_CONFIG_STMTJRNL_SPILL: i32 = 26;
pub const SQLITE_CONFIG_SMALL_MALLOC: i32 = 27;
pub const SQLITE_CONFIG_SORTERREF_SIZE: i32 = 28;
pub const SQLITE_CONFIG_MEMDB_MAXSIZE: i32 = 29;
pub const SQLITE_DBCONFIG_MAINDBNAME: i32 = 1000;
pub const SQLITE_DBCONFIG_LOOKASIDE: i32 = 1001;
pub const SQLITE_DBCONFIG_ENABLE_FKEY: i32 = 1002;
pub const SQLITE_DBCONFIG_ENABLE_TRIGGER: i32 = 1003;
pub const SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER: i32 = 1004;
pub const SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION: i32 = 1005;
pub const SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE: i32 = 1006;
pub const SQLITE_DBCONFIG_ENABLE_QPSG: i32 = 1007;
pub const SQLITE_DBCONFIG_TRIGGER_EQP: i32 = 1008;
pub const SQLITE_DBCONFIG_RESET_DATABASE: i32 = 1009;
pub const SQLITE_DBCONFIG_DEFENSIVE: i32 = 1010;
pub const SQLITE_DBCONFIG_WRITABLE_SCHEMA: i32 = 1011;
pub const SQLITE_DBCONFIG_LEGACY_ALTER_TABLE: i32 = 1012;
pub const SQLITE_DBCONFIG_DQS_DML: i32 = 1013;
pub const SQLITE_DBCONFIG_DQS_DDL: i32 = 1014;
pub const SQLITE_DBCONFIG_ENABLE_VIEW: i32 = 1015;
pub const SQLITE_DBCONFIG_LEGACY_FILE_FORMAT: i32 = 1016;
pub const SQLITE_DBCONFIG_TRUSTED_SCHEMA: i32 = 1017;
pub const SQLITE_DBCONFIG_MAX: i32 = 1017;
pub const SQLITE_DENY: i32 = 1;
pub const SQLITE_IGNORE: i32 = 2;
pub const SQLITE_CREATE_INDEX: i32 = 1;
pub const SQLITE_CREATE_TABLE: i32 = 2;
pub const SQLITE_CREATE_TEMP_INDEX: i32 = 3;
pub const SQLITE_CREATE_TEMP_TABLE: i32 = 4;
pub const SQLITE_CREATE_TEMP_TRIGGER: i32 = 5;
pub const SQLITE_CREATE_TEMP_VIEW: i32 = 6;
pub const SQLITE_CREATE_TRIGGER: i32 = 7;
pub const SQLITE_CREATE_VIEW: i32 = 8;
pub const SQLITE_DELETE: i32 = 9;
pub const SQLITE_DROP_INDEX: i32 = 10;
pub const SQLITE_DROP_TABLE: i32 = 11;
pub const SQLITE_DROP_TEMP_INDEX: i32 = 12;
pub const SQLITE_DROP_TEMP_TABLE: i32 = 13;
pub const SQLITE_DROP_TEMP_TRIGGER: i32 = 14;
pub const SQLITE_DROP_TEMP_VIEW: i32 = 15;
pub const SQLITE_DROP_TRIGGER: i32 = 16;
pub const SQLITE_DROP_VIEW: i32 = 17;
pub const SQLITE_INSERT: i32 = 18;
pub const SQLITE_PRAGMA: i32 = 19;
pub const SQLITE_READ: i32 = 20;
pub const SQLITE_SELECT: i32 = 21;
pub const SQLITE_TRANSACTION: i32 = 22;
pub const SQLITE_UPDATE: i32 = 23;
pub const SQLITE_ATTACH: i32 = 24;
pub const SQLITE_DETACH: i32 = 25;
pub const SQLITE_ALTER_TABLE: i32 = 26;
pub const SQLITE_REINDEX: i32 = 27;
pub const SQLITE_ANALYZE: i32 = 28;
pub const SQLITE_CREATE_VTABLE: i32 = 29;
pub const SQLITE_DROP_VTABLE: i32 = 30;
pub const SQLITE_FUNCTION: i32 = 31;
pub const SQLITE_SAVEPOINT: i32 = 32;
pub const SQLITE_COPY: i32 = 0;
pub const SQLITE_RECURSIVE: i32 = 33;
pub const SQLITE_TRACE_STMT: i32 = 1;
pub const SQLITE_TRACE_PROFILE: i32 = 2;
pub const SQLITE_TRACE_ROW: i32 = 4;
pub const SQLITE_TRACE_CLOSE: i32 = 8;
pub const SQLITE_LIMIT_LENGTH: i32 = 0;
pub const SQLITE_LIMIT_SQL_LENGTH: i32 = 1;
pub const SQLITE_LIMIT_COLUMN: i32 = 2;
pub const SQLITE_LIMIT_EXPR_DEPTH: i32 = 3;
pub const SQLITE_LIMIT_COMPOUND_SELECT: i32 = 4;
pub const SQLITE_LIMIT_VDBE_OP: i32 = 5;
pub const SQLITE_LIMIT_FUNCTION_ARG: i32 = 6;
pub const SQLITE_LIMIT_ATTACHED: i32 = 7;
pub const SQLITE_LIMIT_LIKE_PATTERN_LENGTH: i32 = 8;
pub const SQLITE_LIMIT_VARIABLE_NUMBER: i32 = 9;
pub const SQLITE_LIMIT_TRIGGER_DEPTH: i32 = 10;
pub const SQLITE_LIMIT_WORKER_THREADS: i32 = 11;
pub const SQLITE_PREPARE_PERSISTENT: i32 = 1;
pub const SQLITE_PREPARE_NORMALIZE: i32 = 2;
pub const SQLITE_PREPARE_NO_VTAB: i32 = 4;
pub const SQLITE_INTEGER: i32 = 1;
pub const SQLITE_FLOAT: i32 = 2;
pub const SQLITE_BLOB: i32 = 4;
pub const SQLITE_NULL: i32 = 5;
pub const SQLITE_TEXT: i32 = 3;
pub const SQLITE3_TEXT: i32 = 3;
pub const SQLITE_UTF8: i32 = 1;
pub const SQLITE_UTF16LE: i32 = 2;
pub const SQLITE_UTF16BE: i32 = 3;
pub const SQLITE_UTF16: i32 = 4;
pub const SQLITE_ANY: i32 = 5;
pub const SQLITE_UTF16_ALIGNED: i32 = 8;
pub const SQLITE_DETERMINISTIC: i32 = 2048;
pub const SQLITE_DIRECTONLY: i32 = 524288;
pub const SQLITE_SUBTYPE: i32 = 1048576;
pub const SQLITE_INNOCUOUS: i32 = 2097152;
pub const SQLITE_WIN32_DATA_DIRECTORY_TYPE: i32 = 1;
pub const SQLITE_WIN32_TEMP_DIRECTORY_TYPE: i32 = 2;
pub const SQLITE_TXN_NONE: i32 = 0;
pub const SQLITE_TXN_READ: i32 = 1;
pub const SQLITE_TXN_WRITE: i32 = 2;
pub const SQLITE_INDEX_SCAN_UNIQUE: i32 = 1;
pub const SQLITE_INDEX_CONSTRAINT_EQ: i32 = 2;
pub const SQLITE_INDEX_CONSTRAINT_GT: i32 = 4;
pub const SQLITE_INDEX_CONSTRAINT_LE: i32 = 8;
pub const SQLITE_INDEX_CONSTRAINT_LT: i32 = 16;
pub const SQLITE_INDEX_CONSTRAINT_GE: i32 = 32;
pub const SQLITE_INDEX_CONSTRAINT_MATCH: i32 = 64;
pub const SQLITE_INDEX_CONSTRAINT_LIKE: i32 = 65;
pub const SQLITE_INDEX_CONSTRAINT_GLOB: i32 = 66;
pub const SQLITE_INDEX_CONSTRAINT_REGEXP: i32 = 67;
pub const SQLITE_INDEX_CONSTRAINT_NE: i32 = 68;
pub const SQLITE_INDEX_CONSTRAINT_ISNOT: i32 = 69;
pub const SQLITE_INDEX_CONSTRAINT_ISNOTNULL: i32 = 70;
pub const SQLITE_INDEX_CONSTRAINT_ISNULL: i32 = 71;
pub const SQLITE_INDEX_CONSTRAINT_IS: i32 = 72;
pub const SQLITE_INDEX_CONSTRAINT_LIMIT: i32 = 73;
pub const SQLITE_INDEX_CONSTRAINT_OFFSET: i32 = 74;
pub const SQLITE_INDEX_CONSTRAINT_FUNCTION: i32 = 150;
pub const SQLITE_MUTEX_FAST: i32 = 0;
pub const SQLITE_MUTEX_RECURSIVE: i32 = 1;
pub const SQLITE_MUTEX_STATIC_MAIN: i32 = 2;
pub const SQLITE_MUTEX_STATIC_MEM: i32 = 3;
pub const SQLITE_MUTEX_STATIC_MEM2: i32 = 4;
pub const SQLITE_MUTEX_STATIC_OPEN: i32 = 4;
pub const SQLITE_MUTEX_STATIC_PRNG: i32 = 5;
pub const SQLITE_MUTEX_STATIC_LRU: i32 = 6;
pub const SQLITE_MUTEX_STATIC_LRU2: i32 = 7;
pub const SQLITE_MUTEX_STATIC_PMEM: i32 = 7;
pub const SQLITE_MUTEX_STATIC_APP1: i32 = 8;
pub const SQLITE_MUTEX_STATIC_APP2: i32 = 9;
pub const SQLITE_MUTEX_STATIC_APP3: i32 = 10;
pub const SQLITE_MUTEX_STATIC_VFS1: i32 = 11;
pub const SQLITE_MUTEX_STATIC_VFS2: i32 = 12;
pub const SQLITE_MUTEX_STATIC_VFS3: i32 = 13;
pub const SQLITE_MUTEX_STATIC_MASTER: i32 = 2;
pub const SQLITE_TESTCTRL_FIRST: i32 = 5;
pub const SQLITE_TESTCTRL_PRNG_SAVE: i32 = 5;
pub const SQLITE_TESTCTRL_PRNG_RESTORE: i32 = 6;
pub const SQLITE_TESTCTRL_PRNG_RESET: i32 = 7;
pub const SQLITE_TESTCTRL_BITVEC_TEST: i32 = 8;
pub const SQLITE_TESTCTRL_FAULT_INSTALL: i32 = 9;
pub const SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS: i32 = 10;
pub const SQLITE_TESTCTRL_PENDING_BYTE: i32 = 11;
pub const SQLITE_TESTCTRL_ASSERT: i32 = 12;
pub const SQLITE_TESTCTRL_ALWAYS: i32 = 13;
pub const SQLITE_TESTCTRL_RESERVE: i32 = 14;
pub const SQLITE_TESTCTRL_OPTIMIZATIONS: i32 = 15;
pub const SQLITE_TESTCTRL_ISKEYWORD: i32 = 16;
pub const SQLITE_TESTCTRL_SCRATCHMALLOC: i32 = 17;
pub const SQLITE_TESTCTRL_INTERNAL_FUNCTIONS: i32 = 17;
pub const SQLITE_TESTCTRL_LOCALTIME_FAULT: i32 = 18;
pub const SQLITE_TESTCTRL_EXPLAIN_STMT: i32 = 19;
pub const SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD: i32 = 19;
pub const SQLITE_TESTCTRL_NEVER_CORRUPT: i32 = 20;
pub const SQLITE_TESTCTRL_VDBE_COVERAGE: i32 = 21;
pub const SQLITE_TESTCTRL_BYTEORDER: i32 = 22;
pub const SQLITE_TESTCTRL_ISINIT: i32 = 23;
pub const SQLITE_TESTCTRL_SORTER_MMAP: i32 = 24;
pub const SQLITE_TESTCTRL_IMPOSTER: i32 = 25;
pub const SQLITE_TESTCTRL_PARSER_COVERAGE: i32 = 26;
pub const SQLITE_TESTCTRL_RESULT_INTREAL: i32 = 27;
pub const SQLITE_TESTCTRL_PRNG_SEED: i32 = 28;
pub const SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS: i32 = 29;
pub const SQLITE_TESTCTRL_SEEK_COUNT: i32 = 30;
pub const SQLITE_TESTCTRL_TRACEFLAGS: i32 = 31;
pub const SQLITE_TESTCTRL_TUNE: i32 = 32;
pub const SQLITE_TESTCTRL_LOGEST: i32 = 33;
pub const SQLITE_TESTCTRL_LAST: i32 = 33;
pub const SQLITE_STATUS_MEMORY_USED: i32 = 0;
pub const SQLITE_STATUS_PAGECACHE_USED: i32 = 1;
pub const SQLITE_STATUS_PAGECACHE_OVERFLOW: i32 = 2;
pub const SQLITE_STATUS_SCRATCH_USED: i32 = 3;
pub const SQLITE_STATUS_SCRATCH_OVERFLOW: i32 = 4;
pub const SQLITE_STATUS_MALLOC_SIZE: i32 = 5;
pub const SQLITE_STATUS_PARSER_STACK: i32 = 6;
pub const SQLITE_STATUS_PAGECACHE_SIZE: i32 = 7;
pub const SQLITE_STATUS_SCRATCH_SIZE: i32 = 8;
pub const SQLITE_STATUS_MALLOC_COUNT: i32 = 9;
pub const SQLITE_DBSTATUS_LOOKASIDE_USED: i32 = 0;
pub const SQLITE_DBSTATUS_CACHE_USED: i32 = 1;
pub const SQLITE_DBSTATUS_SCHEMA_USED: i32 = 2;
pub const SQLITE_DBSTATUS_STMT_USED: i32 = 3;
pub const SQLITE_DBSTATUS_LOOKASIDE_HIT: i32 = 4;
pub const SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE: i32 = 5;
pub const SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL: i32 = 6;
pub const SQLITE_DBSTATUS_CACHE_HIT: i32 = 7;
pub const SQLITE_DBSTATUS_CACHE_MISS: i32 = 8;
pub const SQLITE_DBSTATUS_CACHE_WRITE: i32 = 9;
pub const SQLITE_DBSTATUS_DEFERRED_FKS: i32 = 10;
pub const SQLITE_DBSTATUS_CACHE_USED_SHARED: i32 = 11;
pub const SQLITE_DBSTATUS_CACHE_SPILL: i32 = 12;
pub const SQLITE_DBSTATUS_MAX: i32 = 12;
pub const SQLITE_STMTSTATUS_FULLSCAN_STEP: i32 = 1;
pub const SQLITE_STMTSTATUS_SORT: i32 = 2;
pub const SQLITE_STMTSTATUS_AUTOINDEX: i32 = 3;
pub const SQLITE_STMTSTATUS_VM_STEP: i32 = 4;
pub const SQLITE_STMTSTATUS_REPREPARE: i32 = 5;
pub const SQLITE_STMTSTATUS_RUN: i32 = 6;
pub const SQLITE_STMTSTATUS_FILTER_MISS: i32 = 7;
pub const SQLITE_STMTSTATUS_FILTER_HIT: i32 = 8;
pub const SQLITE_STMTSTATUS_MEMUSED: i32 = 99;
pub const SQLITE_CHECKPOINT_PASSIVE: i32 = 0;
pub const SQLITE_CHECKPOINT_FULL: i32 = 1;
pub const SQLITE_CHECKPOINT_RESTART: i32 = 2;
pub const SQLITE_CHECKPOINT_TRUNCATE: i32 = 3;
pub const SQLITE_VTAB_CONSTRAINT_SUPPORT: i32 = 1;
pub const SQLITE_VTAB_INNOCUOUS: i32 = 2;
pub const SQLITE_VTAB_DIRECTONLY: i32 = 3;
pub const SQLITE_ROLLBACK: i32 = 1;
pub const SQLITE_FAIL: i32 = 3;
pub const SQLITE_REPLACE: i32 = 5;
pub const SQLITE_SCANSTAT_NLOOP: i32 = 0;
pub const SQLITE_SCANSTAT_NVISIT: i32 = 1;
pub const SQLITE_SCANSTAT_EST: i32 = 2;
pub const SQLITE_SCANSTAT_NAME: i32 = 3;
pub const SQLITE_SCANSTAT_EXPLAIN: i32 = 4;
pub const SQLITE_SCANSTAT_SELECTID: i32 = 5;
pub const SQLITE_SERIALIZE_NOCOPY: i32 = 1;
pub const SQLITE_DESERIALIZE_FREEONCLOSE: i32 = 1;
pub const SQLITE_DESERIALIZE_RESIZEABLE: i32 = 2;
pub const SQLITE_DESERIALIZE_READONLY: i32 = 4;
pub const NOT_WITHIN: i32 = 0;
pub const PARTLY_WITHIN: i32 = 1;
pub const FULLY_WITHIN: i32 = 2;
pub const FTS5_TOKENIZE_QUERY: i32 = 1;
pub const FTS5_TOKENIZE_PREFIX: i32 = 2;
pub const FTS5_TOKENIZE_DOCUMENT: i32 = 4;
pub const FTS5_TOKENIZE_AUX: i32 = 8;
pub const FTS5_TOKEN_COLOCATED: i32 = 1;
pub type va_list = __builtin_va_list;
extern "C" {
    pub static mut sqlite3_version: [::std::os::raw::c_char; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3 {
    _unused: [u8; 0],
}
pub type sqlite_int64 = ::std::os::raw::c_longlong;
pub type sqlite_uint64 = ::std::os::raw::c_ulonglong;
pub type sqlite3_int64 = sqlite_int64;
pub type sqlite3_uint64 = sqlite_uint64;
pub type sqlite3_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_file {
    pub pMethods: *const sqlite3_io_methods,
}
#[test]
fn bindgen_test_layout_sqlite3_file() {
    assert_eq!(
        ::std::mem::size_of::<sqlite3_file>(),
        8usize,
        concat!("Size of: ", stringify!(sqlite3_file))
    );
    assert_eq!(
        ::std::mem::align_of::<sqlite3_file>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_file))
    );
    fn test_field_pMethods() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_file>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pMethods) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_file),
                "::",
                stringify!(pMethods)
            )
        );
    }
    test_field_pMethods();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_io_methods {
    pub iVersion: ::std::os::raw::c_int,
    pub xClose: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_file) -> ::std::os::raw::c_int,
    >,
    pub xRead: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_file,
            arg2: *mut ::std::os::raw::c_void,
            iAmt: ::std::os::raw::c_int,
            iOfst: sqlite3_int64,
        ) -> ::std::os::raw::c_int,
    >,
    pub xWrite: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_file,
            arg2: *const ::std::os::raw::c_void,
            iAmt: ::std::os::raw::c_int,
            iOfst: sqlite3_int64,
        ) -> ::std::os::raw::c_int,
    >,
    pub xTruncate: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_file, size: sqlite3_int64) -> ::std::os::raw::c_int,
    >,
    pub xSync: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_file,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xFileSize: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_file,
            pSize: *mut sqlite3_int64,
        ) -> ::std::os::raw::c_int,
    >,
    pub xLock: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_file,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xUnlock: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_file,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xCheckReservedLock: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_file,
            pResOut: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xFileControl: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_file,
            op: ::std::os::raw::c_int,
            pArg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub xSectorSize: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_file) -> ::std::os::raw::c_int,
    >,
    pub xDeviceCharacteristics: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_file) -> ::std::os::raw::c_int,
    >,
    pub xShmMap: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_file,
            iPg: ::std::os::raw::c_int,
            pgsz: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
            arg3: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub xShmLock: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_file,
            offset: ::std::os::raw::c_int,
            n: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xShmBarrier: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_file)>,
    pub xShmUnmap: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_file,
            deleteFlag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xFetch: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_file,
            iOfst: sqlite3_int64,
            iAmt: ::std::os::raw::c_int,
            pp: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub xUnfetch: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_file,
            iOfst: sqlite3_int64,
            p: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_sqlite3_io_methods() {
    assert_eq!(
        ::std::mem::size_of::<sqlite3_io_methods>(),
        152usize,
        concat!("Size of: ", stringify!(sqlite3_io_methods))
    );
    assert_eq!(
        ::std::mem::align_of::<sqlite3_io_methods>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_io_methods))
    );
    fn test_field_iVersion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_io_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iVersion) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_io_methods),
                "::",
                stringify!(iVersion)
            )
        );
    }
    test_field_iVersion();
    fn test_field_xClose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_io_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xClose) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_io_methods),
                "::",
                stringify!(xClose)
            )
        );
    }
    test_field_xClose();
    fn test_field_xRead() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_io_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xRead) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_io_methods),
                "::",
                stringify!(xRead)
            )
        );
    }
    test_field_xRead();
    fn test_field_xWrite() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_io_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xWrite) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_io_methods),
                "::",
                stringify!(xWrite)
            )
        );
    }
    test_field_xWrite();
    fn test_field_xTruncate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_io_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xTruncate) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_io_methods),
                "::",
                stringify!(xTruncate)
            )
        );
    }
    test_field_xTruncate();
    fn test_field_xSync() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_io_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xSync) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_io_methods),
                "::",
                stringify!(xSync)
            )
        );
    }
    test_field_xSync();
    fn test_field_xFileSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_io_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xFileSize) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_io_methods),
                "::",
                stringify!(xFileSize)
            )
        );
    }
    test_field_xFileSize();
    fn test_field_xLock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_io_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xLock) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_io_methods),
                "::",
                stringify!(xLock)
            )
        );
    }
    test_field_xLock();
    fn test_field_xUnlock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_io_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xUnlock) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_io_methods),
                "::",
                stringify!(xUnlock)
            )
        );
    }
    test_field_xUnlock();
    fn test_field_xCheckReservedLock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_io_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xCheckReservedLock) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_io_methods),
                "::",
                stringify!(xCheckReservedLock)
            )
        );
    }
    test_field_xCheckReservedLock();
    fn test_field_xFileControl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_io_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xFileControl) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_io_methods),
                "::",
                stringify!(xFileControl)
            )
        );
    }
    test_field_xFileControl();
    fn test_field_xSectorSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_io_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xSectorSize) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_io_methods),
                "::",
                stringify!(xSectorSize)
            )
        );
    }
    test_field_xSectorSize();
    fn test_field_xDeviceCharacteristics() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_io_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xDeviceCharacteristics) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_io_methods),
                "::",
                stringify!(xDeviceCharacteristics)
            )
        );
    }
    test_field_xDeviceCharacteristics();
    fn test_field_xShmMap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_io_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xShmMap) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_io_methods),
                "::",
                stringify!(xShmMap)
            )
        );
    }
    test_field_xShmMap();
    fn test_field_xShmLock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_io_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xShmLock) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_io_methods),
                "::",
                stringify!(xShmLock)
            )
        );
    }
    test_field_xShmLock();
    fn test_field_xShmBarrier() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_io_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xShmBarrier) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_io_methods),
                "::",
                stringify!(xShmBarrier)
            )
        );
    }
    test_field_xShmBarrier();
    fn test_field_xShmUnmap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_io_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xShmUnmap) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_io_methods),
                "::",
                stringify!(xShmUnmap)
            )
        );
    }
    test_field_xShmUnmap();
    fn test_field_xFetch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_io_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xFetch) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_io_methods),
                "::",
                stringify!(xFetch)
            )
        );
    }
    test_field_xFetch();
    fn test_field_xUnfetch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_io_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xUnfetch) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_io_methods),
                "::",
                stringify!(xUnfetch)
            )
        );
    }
    test_field_xUnfetch();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_mutex {
    _unused: [u8; 0],
}
pub type sqlite3_syscall_ptr = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_vfs {
    pub iVersion: ::std::os::raw::c_int,
    pub szOsFile: ::std::os::raw::c_int,
    pub mxPathname: ::std::os::raw::c_int,
    pub pNext: *mut sqlite3_vfs,
    pub zName: *const ::std::os::raw::c_char,
    pub pAppData: *mut ::std::os::raw::c_void,
    pub xOpen: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            zName: *const ::std::os::raw::c_char,
            arg2: *mut sqlite3_file,
            flags: ::std::os::raw::c_int,
            pOutFlags: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xDelete: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            zName: *const ::std::os::raw::c_char,
            syncDir: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xAccess: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            zName: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            pResOut: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xFullPathname: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            zName: *const ::std::os::raw::c_char,
            nOut: ::std::os::raw::c_int,
            zOut: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub xDlOpen: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            zFilename: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub xDlError: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            nByte: ::std::os::raw::c_int,
            zErrMsg: *mut ::std::os::raw::c_char,
        ),
    >,
    pub xDlSym: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            arg2: *mut ::std::os::raw::c_void,
            zSymbol: *const ::std::os::raw::c_char,
        ) -> ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut sqlite3_vfs,
                arg2: *mut ::std::os::raw::c_void,
                zSymbol: *const ::std::os::raw::c_char,
            ),
        >,
    >,
    pub xDlClose: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_vfs, arg2: *mut ::std::os::raw::c_void),
    >,
    pub xRandomness: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            nByte: ::std::os::raw::c_int,
            zOut: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub xSleep: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            microseconds: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_vfs, arg2: *mut f64) -> ::std::os::raw::c_int,
    >,
    pub xGetLastError: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            arg2: ::std::os::raw::c_int,
            arg3: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub xCurrentTimeInt64: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            arg2: *mut sqlite3_int64,
        ) -> ::std::os::raw::c_int,
    >,
    pub xSetSystemCall: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            zName: *const ::std::os::raw::c_char,
            arg2: sqlite3_syscall_ptr,
        ) -> ::std::os::raw::c_int,
    >,
    pub xGetSystemCall: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            zName: *const ::std::os::raw::c_char,
        ) -> sqlite3_syscall_ptr,
    >,
    pub xNextSystemCall: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            zName: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
}
#[test]
fn bindgen_test_layout_sqlite3_vfs() {
    assert_eq!(
        ::std::mem::size_of::<sqlite3_vfs>(),
        168usize,
        concat!("Size of: ", stringify!(sqlite3_vfs))
    );
    assert_eq!(
        ::std::mem::align_of::<sqlite3_vfs>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_vfs))
    );
    fn test_field_iVersion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iVersion) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(iVersion)
            )
        );
    }
    test_field_iVersion();
    fn test_field_szOsFile() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).szOsFile) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(szOsFile)
            )
        );
    }
    test_field_szOsFile();
    fn test_field_mxPathname() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mxPathname) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(mxPathname)
            )
        );
    }
    test_field_mxPathname();
    fn test_field_pNext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(pNext)
            )
        );
    }
    test_field_pNext();
    fn test_field_zName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zName) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(zName)
            )
        );
    }
    test_field_zName();
    fn test_field_pAppData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pAppData) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(pAppData)
            )
        );
    }
    test_field_pAppData();
    fn test_field_xOpen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xOpen) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(xOpen)
            )
        );
    }
    test_field_xOpen();
    fn test_field_xDelete() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xDelete) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(xDelete)
            )
        );
    }
    test_field_xDelete();
    fn test_field_xAccess() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xAccess) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(xAccess)
            )
        );
    }
    test_field_xAccess();
    fn test_field_xFullPathname() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xFullPathname) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(xFullPathname)
            )
        );
    }
    test_field_xFullPathname();
    fn test_field_xDlOpen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xDlOpen) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(xDlOpen)
            )
        );
    }
    test_field_xDlOpen();
    fn test_field_xDlError() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xDlError) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(xDlError)
            )
        );
    }
    test_field_xDlError();
    fn test_field_xDlSym() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xDlSym) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(xDlSym)
            )
        );
    }
    test_field_xDlSym();
    fn test_field_xDlClose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xDlClose) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(xDlClose)
            )
        );
    }
    test_field_xDlClose();
    fn test_field_xRandomness() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xRandomness) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(xRandomness)
            )
        );
    }
    test_field_xRandomness();
    fn test_field_xSleep() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xSleep) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(xSleep)
            )
        );
    }
    test_field_xSleep();
    fn test_field_xCurrentTime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xCurrentTime) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(xCurrentTime)
            )
        );
    }
    test_field_xCurrentTime();
    fn test_field_xGetLastError() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xGetLastError) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(xGetLastError)
            )
        );
    }
    test_field_xGetLastError();
    fn test_field_xCurrentTimeInt64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xCurrentTimeInt64) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(xCurrentTimeInt64)
            )
        );
    }
    test_field_xCurrentTimeInt64();
    fn test_field_xSetSystemCall() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xSetSystemCall) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(xSetSystemCall)
            )
        );
    }
    test_field_xSetSystemCall();
    fn test_field_xGetSystemCall() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xGetSystemCall) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(xGetSystemCall)
            )
        );
    }
    test_field_xGetSystemCall();
    fn test_field_xNextSystemCall() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vfs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xNextSystemCall) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vfs),
                "::",
                stringify!(xNextSystemCall)
            )
        );
    }
    test_field_xNextSystemCall();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_mem_methods {
    pub xMalloc: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void,
    >,
    pub xFree: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub xRealloc: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub xSize: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub xRoundup: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub xInit: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub xShutdown: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub pAppData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sqlite3_mem_methods() {
    assert_eq!(
        ::std::mem::size_of::<sqlite3_mem_methods>(),
        64usize,
        concat!("Size of: ", stringify!(sqlite3_mem_methods))
    );
    assert_eq!(
        ::std::mem::align_of::<sqlite3_mem_methods>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_mem_methods))
    );
    fn test_field_xMalloc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_mem_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xMalloc) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_mem_methods),
                "::",
                stringify!(xMalloc)
            )
        );
    }
    test_field_xMalloc();
    fn test_field_xFree() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_mem_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xFree) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_mem_methods),
                "::",
                stringify!(xFree)
            )
        );
    }
    test_field_xFree();
    fn test_field_xRealloc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_mem_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xRealloc) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_mem_methods),
                "::",
                stringify!(xRealloc)
            )
        );
    }
    test_field_xRealloc();
    fn test_field_xSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_mem_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xSize) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_mem_methods),
                "::",
                stringify!(xSize)
            )
        );
    }
    test_field_xSize();
    fn test_field_xRoundup() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_mem_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xRoundup) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_mem_methods),
                "::",
                stringify!(xRoundup)
            )
        );
    }
    test_field_xRoundup();
    fn test_field_xInit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_mem_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xInit) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_mem_methods),
                "::",
                stringify!(xInit)
            )
        );
    }
    test_field_xInit();
    fn test_field_xShutdown() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_mem_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xShutdown) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_mem_methods),
                "::",
                stringify!(xShutdown)
            )
        );
    }
    test_field_xShutdown();
    fn test_field_pAppData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_mem_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pAppData) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_mem_methods),
                "::",
                stringify!(pAppData)
            )
        );
    }
    test_field_pAppData();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_stmt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_value {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_context {
    _unused: [u8; 0],
}
pub type sqlite3_destructor_type =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub static mut sqlite3_temp_directory: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut sqlite3_data_directory: *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_module {
    pub iVersion: ::std::os::raw::c_int,
    pub xCreate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            pAux: *mut ::std::os::raw::c_void,
            argc: ::std::os::raw::c_int,
            argv: *const *const ::std::os::raw::c_char,
            ppVTab: *mut *mut sqlite3_vtab,
            arg2: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub xConnect: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            pAux: *mut ::std::os::raw::c_void,
            argc: ::std::os::raw::c_int,
            argv: *const *const ::std::os::raw::c_char,
            ppVTab: *mut *mut sqlite3_vtab,
            arg2: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub xBestIndex: ::std::option::Option<
        unsafe extern "C" fn(
            pVTab: *mut sqlite3_vtab,
            arg1: *mut sqlite3_index_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub xDisconnect: ::std::option::Option<
        unsafe extern "C" fn(pVTab: *mut sqlite3_vtab) -> ::std::os::raw::c_int,
    >,
    pub xDestroy: ::std::option::Option<
        unsafe extern "C" fn(pVTab: *mut sqlite3_vtab) -> ::std::os::raw::c_int,
    >,
    pub xOpen: ::std::option::Option<
        unsafe extern "C" fn(
            pVTab: *mut sqlite3_vtab,
            ppCursor: *mut *mut sqlite3_vtab_cursor,
        ) -> ::std::os::raw::c_int,
    >,
    pub xClose: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_vtab_cursor) -> ::std::os::raw::c_int,
    >,
    pub xFilter: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vtab_cursor,
            idxNum: ::std::os::raw::c_int,
            idxStr: *const ::std::os::raw::c_char,
            argc: ::std::os::raw::c_int,
            argv: *mut *mut sqlite3_value,
        ) -> ::std::os::raw::c_int,
    >,
    pub xNext: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_vtab_cursor) -> ::std::os::raw::c_int,
    >,
    pub xEof: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_vtab_cursor) -> ::std::os::raw::c_int,
    >,
    pub xColumn: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vtab_cursor,
            arg2: *mut sqlite3_context,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xRowid: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vtab_cursor,
            pRowid: *mut sqlite3_int64,
        ) -> ::std::os::raw::c_int,
    >,
    pub xUpdate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vtab,
            arg2: ::std::os::raw::c_int,
            arg3: *mut *mut sqlite3_value,
            arg4: *mut sqlite3_int64,
        ) -> ::std::os::raw::c_int,
    >,
    pub xBegin: ::std::option::Option<
        unsafe extern "C" fn(pVTab: *mut sqlite3_vtab) -> ::std::os::raw::c_int,
    >,
    pub xSync: ::std::option::Option<
        unsafe extern "C" fn(pVTab: *mut sqlite3_vtab) -> ::std::os::raw::c_int,
    >,
    pub xCommit: ::std::option::Option<
        unsafe extern "C" fn(pVTab: *mut sqlite3_vtab) -> ::std::os::raw::c_int,
    >,
    pub xRollback: ::std::option::Option<
        unsafe extern "C" fn(pVTab: *mut sqlite3_vtab) -> ::std::os::raw::c_int,
    >,
    pub xFindFunction: ::std::option::Option<
        unsafe extern "C" fn(
            pVtab: *mut sqlite3_vtab,
            nArg: ::std::os::raw::c_int,
            zName: *const ::std::os::raw::c_char,
            pxFunc: *mut ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut sqlite3_context,
                    arg2: ::std::os::raw::c_int,
                    arg3: *mut *mut sqlite3_value,
                ),
            >,
            ppArg: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub xRename: ::std::option::Option<
        unsafe extern "C" fn(
            pVtab: *mut sqlite3_vtab,
            zNew: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub xSavepoint: ::std::option::Option<
        unsafe extern "C" fn(
            pVTab: *mut sqlite3_vtab,
            arg1: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xRelease: ::std::option::Option<
        unsafe extern "C" fn(
            pVTab: *mut sqlite3_vtab,
            arg1: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xRollbackTo: ::std::option::Option<
        unsafe extern "C" fn(
            pVTab: *mut sqlite3_vtab,
            arg1: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xShadowName: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_sqlite3_module() {
    assert_eq!(
        ::std::mem::size_of::<sqlite3_module>(),
        192usize,
        concat!("Size of: ", stringify!(sqlite3_module))
    );
    assert_eq!(
        ::std::mem::align_of::<sqlite3_module>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_module))
    );
    fn test_field_iVersion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iVersion) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(iVersion)
            )
        );
    }
    test_field_iVersion();
    fn test_field_xCreate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xCreate) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xCreate)
            )
        );
    }
    test_field_xCreate();
    fn test_field_xConnect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xConnect) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xConnect)
            )
        );
    }
    test_field_xConnect();
    fn test_field_xBestIndex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xBestIndex) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xBestIndex)
            )
        );
    }
    test_field_xBestIndex();
    fn test_field_xDisconnect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xDisconnect) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xDisconnect)
            )
        );
    }
    test_field_xDisconnect();
    fn test_field_xDestroy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xDestroy) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xDestroy)
            )
        );
    }
    test_field_xDestroy();
    fn test_field_xOpen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xOpen) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xOpen)
            )
        );
    }
    test_field_xOpen();
    fn test_field_xClose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xClose) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xClose)
            )
        );
    }
    test_field_xClose();
    fn test_field_xFilter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xFilter) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xFilter)
            )
        );
    }
    test_field_xFilter();
    fn test_field_xNext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xNext) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xNext)
            )
        );
    }
    test_field_xNext();
    fn test_field_xEof() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xEof) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xEof)
            )
        );
    }
    test_field_xEof();
    fn test_field_xColumn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xColumn) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xColumn)
            )
        );
    }
    test_field_xColumn();
    fn test_field_xRowid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xRowid) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xRowid)
            )
        );
    }
    test_field_xRowid();
    fn test_field_xUpdate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xUpdate) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xUpdate)
            )
        );
    }
    test_field_xUpdate();
    fn test_field_xBegin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xBegin) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xBegin)
            )
        );
    }
    test_field_xBegin();
    fn test_field_xSync() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xSync) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xSync)
            )
        );
    }
    test_field_xSync();
    fn test_field_xCommit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xCommit) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xCommit)
            )
        );
    }
    test_field_xCommit();
    fn test_field_xRollback() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xRollback) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xRollback)
            )
        );
    }
    test_field_xRollback();
    fn test_field_xFindFunction() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xFindFunction) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xFindFunction)
            )
        );
    }
    test_field_xFindFunction();
    fn test_field_xRename() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xRename) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xRename)
            )
        );
    }
    test_field_xRename();
    fn test_field_xSavepoint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xSavepoint) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xSavepoint)
            )
        );
    }
    test_field_xSavepoint();
    fn test_field_xRelease() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xRelease) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xRelease)
            )
        );
    }
    test_field_xRelease();
    fn test_field_xRollbackTo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xRollbackTo) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xRollbackTo)
            )
        );
    }
    test_field_xRollbackTo();
    fn test_field_xShadowName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_module>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xShadowName) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_module),
                "::",
                stringify!(xShadowName)
            )
        );
    }
    test_field_xShadowName();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_index_info {
    pub nConstraint: ::std::os::raw::c_int,
    pub aConstraint: *mut sqlite3_index_info_sqlite3_index_constraint,
    pub nOrderBy: ::std::os::raw::c_int,
    pub aOrderBy: *mut sqlite3_index_info_sqlite3_index_orderby,
    pub aConstraintUsage: *mut sqlite3_index_info_sqlite3_index_constraint_usage,
    pub idxNum: ::std::os::raw::c_int,
    pub idxStr: *mut ::std::os::raw::c_char,
    pub needToFreeIdxStr: ::std::os::raw::c_int,
    pub orderByConsumed: ::std::os::raw::c_int,
    pub estimatedCost: f64,
    pub estimatedRows: sqlite3_int64,
    pub idxFlags: ::std::os::raw::c_int,
    pub colUsed: sqlite3_uint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_index_info_sqlite3_index_constraint {
    pub iColumn: ::std::os::raw::c_int,
    pub op: ::std::os::raw::c_uchar,
    pub usable: ::std::os::raw::c_uchar,
    pub iTermOffset: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sqlite3_index_info_sqlite3_index_constraint() {
    assert_eq!(
        ::std::mem::size_of::<sqlite3_index_info_sqlite3_index_constraint>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(sqlite3_index_info_sqlite3_index_constraint)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sqlite3_index_info_sqlite3_index_constraint>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(sqlite3_index_info_sqlite3_index_constraint)
        )
    );
    fn test_field_iColumn() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<sqlite3_index_info_sqlite3_index_constraint>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iColumn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info_sqlite3_index_constraint),
                "::",
                stringify!(iColumn)
            )
        );
    }
    test_field_iColumn();
    fn test_field_op() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<sqlite3_index_info_sqlite3_index_constraint>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info_sqlite3_index_constraint),
                "::",
                stringify!(op)
            )
        );
    }
    test_field_op();
    fn test_field_usable() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<sqlite3_index_info_sqlite3_index_constraint>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).usable) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info_sqlite3_index_constraint),
                "::",
                stringify!(usable)
            )
        );
    }
    test_field_usable();
    fn test_field_iTermOffset() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<sqlite3_index_info_sqlite3_index_constraint>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iTermOffset) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info_sqlite3_index_constraint),
                "::",
                stringify!(iTermOffset)
            )
        );
    }
    test_field_iTermOffset();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_index_info_sqlite3_index_orderby {
    pub iColumn: ::std::os::raw::c_int,
    pub desc: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_sqlite3_index_info_sqlite3_index_orderby() {
    assert_eq!(
        ::std::mem::size_of::<sqlite3_index_info_sqlite3_index_orderby>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(sqlite3_index_info_sqlite3_index_orderby)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sqlite3_index_info_sqlite3_index_orderby>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(sqlite3_index_info_sqlite3_index_orderby)
        )
    );
    fn test_field_iColumn() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<sqlite3_index_info_sqlite3_index_orderby>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iColumn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info_sqlite3_index_orderby),
                "::",
                stringify!(iColumn)
            )
        );
    }
    test_field_iColumn();
    fn test_field_desc() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<sqlite3_index_info_sqlite3_index_orderby>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info_sqlite3_index_orderby),
                "::",
                stringify!(desc)
            )
        );
    }
    test_field_desc();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_index_info_sqlite3_index_constraint_usage {
    pub argvIndex: ::std::os::raw::c_int,
    pub omit: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_sqlite3_index_info_sqlite3_index_constraint_usage() {
    assert_eq!(
        ::std::mem::size_of::<sqlite3_index_info_sqlite3_index_constraint_usage>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(sqlite3_index_info_sqlite3_index_constraint_usage)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sqlite3_index_info_sqlite3_index_constraint_usage>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(sqlite3_index_info_sqlite3_index_constraint_usage)
        )
    );
    fn test_field_argvIndex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    sqlite3_index_info_sqlite3_index_constraint_usage,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).argvIndex) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info_sqlite3_index_constraint_usage),
                "::",
                stringify!(argvIndex)
            )
        );
    }
    test_field_argvIndex();
    fn test_field_omit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    sqlite3_index_info_sqlite3_index_constraint_usage,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).omit) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info_sqlite3_index_constraint_usage),
                "::",
                stringify!(omit)
            )
        );
    }
    test_field_omit();
}
#[test]
fn bindgen_test_layout_sqlite3_index_info() {
    assert_eq!(
        ::std::mem::size_of::<sqlite3_index_info>(),
        96usize,
        concat!("Size of: ", stringify!(sqlite3_index_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sqlite3_index_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_index_info))
    );
    fn test_field_nConstraint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_index_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nConstraint) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info),
                "::",
                stringify!(nConstraint)
            )
        );
    }
    test_field_nConstraint();
    fn test_field_aConstraint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_index_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aConstraint) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info),
                "::",
                stringify!(aConstraint)
            )
        );
    }
    test_field_aConstraint();
    fn test_field_nOrderBy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_index_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nOrderBy) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info),
                "::",
                stringify!(nOrderBy)
            )
        );
    }
    test_field_nOrderBy();
    fn test_field_aOrderBy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_index_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aOrderBy) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info),
                "::",
                stringify!(aOrderBy)
            )
        );
    }
    test_field_aOrderBy();
    fn test_field_aConstraintUsage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_index_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aConstraintUsage) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info),
                "::",
                stringify!(aConstraintUsage)
            )
        );
    }
    test_field_aConstraintUsage();
    fn test_field_idxNum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_index_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idxNum) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info),
                "::",
                stringify!(idxNum)
            )
        );
    }
    test_field_idxNum();
    fn test_field_idxStr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_index_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idxStr) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info),
                "::",
                stringify!(idxStr)
            )
        );
    }
    test_field_idxStr();
    fn test_field_needToFreeIdxStr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_index_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).needToFreeIdxStr) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info),
                "::",
                stringify!(needToFreeIdxStr)
            )
        );
    }
    test_field_needToFreeIdxStr();
    fn test_field_orderByConsumed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_index_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).orderByConsumed) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info),
                "::",
                stringify!(orderByConsumed)
            )
        );
    }
    test_field_orderByConsumed();
    fn test_field_estimatedCost() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_index_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).estimatedCost) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info),
                "::",
                stringify!(estimatedCost)
            )
        );
    }
    test_field_estimatedCost();
    fn test_field_estimatedRows() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_index_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).estimatedRows) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info),
                "::",
                stringify!(estimatedRows)
            )
        );
    }
    test_field_estimatedRows();
    fn test_field_idxFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_index_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).idxFlags) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info),
                "::",
                stringify!(idxFlags)
            )
        );
    }
    test_field_idxFlags();
    fn test_field_colUsed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_index_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).colUsed) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_index_info),
                "::",
                stringify!(colUsed)
            )
        );
    }
    test_field_colUsed();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_vtab {
    pub pModule: *const sqlite3_module,
    pub nRef: ::std::os::raw::c_int,
    pub zErrMsg: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_sqlite3_vtab() {
    assert_eq!(
        ::std::mem::size_of::<sqlite3_vtab>(),
        24usize,
        concat!("Size of: ", stringify!(sqlite3_vtab))
    );
    assert_eq!(
        ::std::mem::align_of::<sqlite3_vtab>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_vtab))
    );
    fn test_field_pModule() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vtab>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pModule) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vtab),
                "::",
                stringify!(pModule)
            )
        );
    }
    test_field_pModule();
    fn test_field_nRef() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vtab>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nRef) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vtab),
                "::",
                stringify!(nRef)
            )
        );
    }
    test_field_nRef();
    fn test_field_zErrMsg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vtab>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zErrMsg) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vtab),
                "::",
                stringify!(zErrMsg)
            )
        );
    }
    test_field_zErrMsg();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_vtab_cursor {
    pub pVtab: *mut sqlite3_vtab,
}
#[test]
fn bindgen_test_layout_sqlite3_vtab_cursor() {
    assert_eq!(
        ::std::mem::size_of::<sqlite3_vtab_cursor>(),
        8usize,
        concat!("Size of: ", stringify!(sqlite3_vtab_cursor))
    );
    assert_eq!(
        ::std::mem::align_of::<sqlite3_vtab_cursor>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_vtab_cursor))
    );
    fn test_field_pVtab() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_vtab_cursor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pVtab) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_vtab_cursor),
                "::",
                stringify!(pVtab)
            )
        );
    }
    test_field_pVtab();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_blob {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_mutex_methods {
    pub xMutexInit: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub xMutexEnd: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub xMutexAlloc: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> *mut sqlite3_mutex,
    >,
    pub xMutexFree: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_mutex)>,
    pub xMutexEnter: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_mutex)>,
    pub xMutexTry: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_mutex) -> ::std::os::raw::c_int,
    >,
    pub xMutexLeave: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_mutex)>,
    pub xMutexHeld: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_mutex) -> ::std::os::raw::c_int,
    >,
    pub xMutexNotheld: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_mutex) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_sqlite3_mutex_methods() {
    assert_eq!(
        ::std::mem::size_of::<sqlite3_mutex_methods>(),
        72usize,
        concat!("Size of: ", stringify!(sqlite3_mutex_methods))
    );
    assert_eq!(
        ::std::mem::align_of::<sqlite3_mutex_methods>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_mutex_methods))
    );
    fn test_field_xMutexInit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_mutex_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xMutexInit) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_mutex_methods),
                "::",
                stringify!(xMutexInit)
            )
        );
    }
    test_field_xMutexInit();
    fn test_field_xMutexEnd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_mutex_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xMutexEnd) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_mutex_methods),
                "::",
                stringify!(xMutexEnd)
            )
        );
    }
    test_field_xMutexEnd();
    fn test_field_xMutexAlloc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_mutex_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xMutexAlloc) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_mutex_methods),
                "::",
                stringify!(xMutexAlloc)
            )
        );
    }
    test_field_xMutexAlloc();
    fn test_field_xMutexFree() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_mutex_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xMutexFree) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_mutex_methods),
                "::",
                stringify!(xMutexFree)
            )
        );
    }
    test_field_xMutexFree();
    fn test_field_xMutexEnter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_mutex_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xMutexEnter) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_mutex_methods),
                "::",
                stringify!(xMutexEnter)
            )
        );
    }
    test_field_xMutexEnter();
    fn test_field_xMutexTry() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_mutex_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xMutexTry) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_mutex_methods),
                "::",
                stringify!(xMutexTry)
            )
        );
    }
    test_field_xMutexTry();
    fn test_field_xMutexLeave() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_mutex_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xMutexLeave) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_mutex_methods),
                "::",
                stringify!(xMutexLeave)
            )
        );
    }
    test_field_xMutexLeave();
    fn test_field_xMutexHeld() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_mutex_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xMutexHeld) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_mutex_methods),
                "::",
                stringify!(xMutexHeld)
            )
        );
    }
    test_field_xMutexHeld();
    fn test_field_xMutexNotheld() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_mutex_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xMutexNotheld) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_mutex_methods),
                "::",
                stringify!(xMutexNotheld)
            )
        );
    }
    test_field_xMutexNotheld();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_str {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_pcache {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_pcache_page {
    pub pBuf: *mut ::std::os::raw::c_void,
    pub pExtra: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sqlite3_pcache_page() {
    assert_eq!(
        ::std::mem::size_of::<sqlite3_pcache_page>(),
        16usize,
        concat!("Size of: ", stringify!(sqlite3_pcache_page))
    );
    assert_eq!(
        ::std::mem::align_of::<sqlite3_pcache_page>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_pcache_page))
    );
    fn test_field_pBuf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_page>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pBuf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_page),
                "::",
                stringify!(pBuf)
            )
        );
    }
    test_field_pBuf();
    fn test_field_pExtra() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_page>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pExtra) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_page),
                "::",
                stringify!(pExtra)
            )
        );
    }
    test_field_pExtra();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_pcache_methods2 {
    pub iVersion: ::std::os::raw::c_int,
    pub pArg: *mut ::std::os::raw::c_void,
    pub xInit: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub xShutdown: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub xCreate: ::std::option::Option<
        unsafe extern "C" fn(
            szPage: ::std::os::raw::c_int,
            szExtra: ::std::os::raw::c_int,
            bPurgeable: ::std::os::raw::c_int,
        ) -> *mut sqlite3_pcache,
    >,
    pub xCachesize: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_pcache, nCachesize: ::std::os::raw::c_int),
    >,
    pub xPagecount: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_pcache) -> ::std::os::raw::c_int,
    >,
    pub xFetch: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_pcache,
            key: ::std::os::raw::c_uint,
            createFlag: ::std::os::raw::c_int,
        ) -> *mut sqlite3_pcache_page,
    >,
    pub xUnpin: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_pcache,
            arg2: *mut sqlite3_pcache_page,
            discard: ::std::os::raw::c_int,
        ),
    >,
    pub xRekey: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_pcache,
            arg2: *mut sqlite3_pcache_page,
            oldKey: ::std::os::raw::c_uint,
            newKey: ::std::os::raw::c_uint,
        ),
    >,
    pub xTruncate: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_pcache, iLimit: ::std::os::raw::c_uint),
    >,
    pub xDestroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_pcache)>,
    pub xShrink: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_pcache)>,
}
#[test]
fn bindgen_test_layout_sqlite3_pcache_methods2() {
    assert_eq!(
        ::std::mem::size_of::<sqlite3_pcache_methods2>(),
        104usize,
        concat!("Size of: ", stringify!(sqlite3_pcache_methods2))
    );
    assert_eq!(
        ::std::mem::align_of::<sqlite3_pcache_methods2>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_pcache_methods2))
    );
    fn test_field_iVersion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iVersion) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods2),
                "::",
                stringify!(iVersion)
            )
        );
    }
    test_field_iVersion();
    fn test_field_pArg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pArg) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods2),
                "::",
                stringify!(pArg)
            )
        );
    }
    test_field_pArg();
    fn test_field_xInit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xInit) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods2),
                "::",
                stringify!(xInit)
            )
        );
    }
    test_field_xInit();
    fn test_field_xShutdown() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xShutdown) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods2),
                "::",
                stringify!(xShutdown)
            )
        );
    }
    test_field_xShutdown();
    fn test_field_xCreate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xCreate) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods2),
                "::",
                stringify!(xCreate)
            )
        );
    }
    test_field_xCreate();
    fn test_field_xCachesize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xCachesize) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods2),
                "::",
                stringify!(xCachesize)
            )
        );
    }
    test_field_xCachesize();
    fn test_field_xPagecount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xPagecount) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods2),
                "::",
                stringify!(xPagecount)
            )
        );
    }
    test_field_xPagecount();
    fn test_field_xFetch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xFetch) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods2),
                "::",
                stringify!(xFetch)
            )
        );
    }
    test_field_xFetch();
    fn test_field_xUnpin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xUnpin) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods2),
                "::",
                stringify!(xUnpin)
            )
        );
    }
    test_field_xUnpin();
    fn test_field_xRekey() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xRekey) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods2),
                "::",
                stringify!(xRekey)
            )
        );
    }
    test_field_xRekey();
    fn test_field_xTruncate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xTruncate) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods2),
                "::",
                stringify!(xTruncate)
            )
        );
    }
    test_field_xTruncate();
    fn test_field_xDestroy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xDestroy) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods2),
                "::",
                stringify!(xDestroy)
            )
        );
    }
    test_field_xDestroy();
    fn test_field_xShrink() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xShrink) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods2),
                "::",
                stringify!(xShrink)
            )
        );
    }
    test_field_xShrink();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_pcache_methods {
    pub pArg: *mut ::std::os::raw::c_void,
    pub xInit: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub xShutdown: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub xCreate: ::std::option::Option<
        unsafe extern "C" fn(
            szPage: ::std::os::raw::c_int,
            bPurgeable: ::std::os::raw::c_int,
        ) -> *mut sqlite3_pcache,
    >,
    pub xCachesize: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_pcache, nCachesize: ::std::os::raw::c_int),
    >,
    pub xPagecount: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_pcache) -> ::std::os::raw::c_int,
    >,
    pub xFetch: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_pcache,
            key: ::std::os::raw::c_uint,
            createFlag: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub xUnpin: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_pcache,
            arg2: *mut ::std::os::raw::c_void,
            discard: ::std::os::raw::c_int,
        ),
    >,
    pub xRekey: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_pcache,
            arg2: *mut ::std::os::raw::c_void,
            oldKey: ::std::os::raw::c_uint,
            newKey: ::std::os::raw::c_uint,
        ),
    >,
    pub xTruncate: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_pcache, iLimit: ::std::os::raw::c_uint),
    >,
    pub xDestroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_pcache)>,
}
#[test]
fn bindgen_test_layout_sqlite3_pcache_methods() {
    assert_eq!(
        ::std::mem::size_of::<sqlite3_pcache_methods>(),
        88usize,
        concat!("Size of: ", stringify!(sqlite3_pcache_methods))
    );
    assert_eq!(
        ::std::mem::align_of::<sqlite3_pcache_methods>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_pcache_methods))
    );
    fn test_field_pArg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pArg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods),
                "::",
                stringify!(pArg)
            )
        );
    }
    test_field_pArg();
    fn test_field_xInit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xInit) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods),
                "::",
                stringify!(xInit)
            )
        );
    }
    test_field_xInit();
    fn test_field_xShutdown() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xShutdown) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods),
                "::",
                stringify!(xShutdown)
            )
        );
    }
    test_field_xShutdown();
    fn test_field_xCreate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xCreate) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods),
                "::",
                stringify!(xCreate)
            )
        );
    }
    test_field_xCreate();
    fn test_field_xCachesize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xCachesize) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods),
                "::",
                stringify!(xCachesize)
            )
        );
    }
    test_field_xCachesize();
    fn test_field_xPagecount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xPagecount) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods),
                "::",
                stringify!(xPagecount)
            )
        );
    }
    test_field_xPagecount();
    fn test_field_xFetch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xFetch) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods),
                "::",
                stringify!(xFetch)
            )
        );
    }
    test_field_xFetch();
    fn test_field_xUnpin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xUnpin) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods),
                "::",
                stringify!(xUnpin)
            )
        );
    }
    test_field_xUnpin();
    fn test_field_xRekey() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xRekey) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods),
                "::",
                stringify!(xRekey)
            )
        );
    }
    test_field_xRekey();
    fn test_field_xTruncate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xTruncate) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods),
                "::",
                stringify!(xTruncate)
            )
        );
    }
    test_field_xTruncate();
    fn test_field_xDestroy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_pcache_methods>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xDestroy) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_pcache_methods),
                "::",
                stringify!(xDestroy)
            )
        );
    }
    test_field_xDestroy();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_backup {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_snapshot {
    pub hidden: [::std::os::raw::c_uchar; 48usize],
}
#[test]
fn bindgen_test_layout_sqlite3_snapshot() {
    assert_eq!(
        ::std::mem::size_of::<sqlite3_snapshot>(),
        48usize,
        concat!("Size of: ", stringify!(sqlite3_snapshot))
    );
    assert_eq!(
        ::std::mem::align_of::<sqlite3_snapshot>(),
        1usize,
        concat!("Alignment of ", stringify!(sqlite3_snapshot))
    );
    fn test_field_hidden() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_snapshot>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hidden) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_snapshot),
                "::",
                stringify!(hidden)
            )
        );
    }
    test_field_hidden();
}
pub type sqlite3_rtree_dbl = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_rtree_geometry {
    pub pContext: *mut ::std::os::raw::c_void,
    pub nParam: ::std::os::raw::c_int,
    pub aParam: *mut sqlite3_rtree_dbl,
    pub pUser: *mut ::std::os::raw::c_void,
    pub xDelUser: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_sqlite3_rtree_geometry() {
    assert_eq!(
        ::std::mem::size_of::<sqlite3_rtree_geometry>(),
        40usize,
        concat!("Size of: ", stringify!(sqlite3_rtree_geometry))
    );
    assert_eq!(
        ::std::mem::align_of::<sqlite3_rtree_geometry>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_rtree_geometry))
    );
    fn test_field_pContext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_geometry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pContext) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_geometry),
                "::",
                stringify!(pContext)
            )
        );
    }
    test_field_pContext();
    fn test_field_nParam() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_geometry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nParam) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_geometry),
                "::",
                stringify!(nParam)
            )
        );
    }
    test_field_nParam();
    fn test_field_aParam() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_geometry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aParam) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_geometry),
                "::",
                stringify!(aParam)
            )
        );
    }
    test_field_aParam();
    fn test_field_pUser() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_geometry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pUser) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_geometry),
                "::",
                stringify!(pUser)
            )
        );
    }
    test_field_pUser();
    fn test_field_xDelUser() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_geometry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xDelUser) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_geometry),
                "::",
                stringify!(xDelUser)
            )
        );
    }
    test_field_xDelUser();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_rtree_query_info {
    pub pContext: *mut ::std::os::raw::c_void,
    pub nParam: ::std::os::raw::c_int,
    pub aParam: *mut sqlite3_rtree_dbl,
    pub pUser: *mut ::std::os::raw::c_void,
    pub xDelUser: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub aCoord: *mut sqlite3_rtree_dbl,
    pub anQueue: *mut ::std::os::raw::c_uint,
    pub nCoord: ::std::os::raw::c_int,
    pub iLevel: ::std::os::raw::c_int,
    pub mxLevel: ::std::os::raw::c_int,
    pub iRowid: sqlite3_int64,
    pub rParentScore: sqlite3_rtree_dbl,
    pub eParentWithin: ::std::os::raw::c_int,
    pub eWithin: ::std::os::raw::c_int,
    pub rScore: sqlite3_rtree_dbl,
    pub apSqlParam: *mut *mut sqlite3_value,
}
#[test]
fn bindgen_test_layout_sqlite3_rtree_query_info() {
    assert_eq!(
        ::std::mem::size_of::<sqlite3_rtree_query_info>(),
        112usize,
        concat!("Size of: ", stringify!(sqlite3_rtree_query_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sqlite3_rtree_query_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_rtree_query_info))
    );
    fn test_field_pContext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_query_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pContext) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_query_info),
                "::",
                stringify!(pContext)
            )
        );
    }
    test_field_pContext();
    fn test_field_nParam() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_query_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nParam) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_query_info),
                "::",
                stringify!(nParam)
            )
        );
    }
    test_field_nParam();
    fn test_field_aParam() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_query_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aParam) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_query_info),
                "::",
                stringify!(aParam)
            )
        );
    }
    test_field_aParam();
    fn test_field_pUser() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_query_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pUser) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_query_info),
                "::",
                stringify!(pUser)
            )
        );
    }
    test_field_pUser();
    fn test_field_xDelUser() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_query_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xDelUser) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_query_info),
                "::",
                stringify!(xDelUser)
            )
        );
    }
    test_field_xDelUser();
    fn test_field_aCoord() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_query_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aCoord) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_query_info),
                "::",
                stringify!(aCoord)
            )
        );
    }
    test_field_aCoord();
    fn test_field_anQueue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_query_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).anQueue) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_query_info),
                "::",
                stringify!(anQueue)
            )
        );
    }
    test_field_anQueue();
    fn test_field_nCoord() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_query_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nCoord) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_query_info),
                "::",
                stringify!(nCoord)
            )
        );
    }
    test_field_nCoord();
    fn test_field_iLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_query_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iLevel) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_query_info),
                "::",
                stringify!(iLevel)
            )
        );
    }
    test_field_iLevel();
    fn test_field_mxLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_query_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mxLevel) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_query_info),
                "::",
                stringify!(mxLevel)
            )
        );
    }
    test_field_mxLevel();
    fn test_field_iRowid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_query_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iRowid) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_query_info),
                "::",
                stringify!(iRowid)
            )
        );
    }
    test_field_iRowid();
    fn test_field_rParentScore() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_query_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rParentScore) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_query_info),
                "::",
                stringify!(rParentScore)
            )
        );
    }
    test_field_rParentScore();
    fn test_field_eParentWithin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_query_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eParentWithin) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_query_info),
                "::",
                stringify!(eParentWithin)
            )
        );
    }
    test_field_eParentWithin();
    fn test_field_eWithin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_query_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eWithin) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_query_info),
                "::",
                stringify!(eWithin)
            )
        );
    }
    test_field_eWithin();
    fn test_field_rScore() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_query_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rScore) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_query_info),
                "::",
                stringify!(rScore)
            )
        );
    }
    test_field_rScore();
    fn test_field_apSqlParam() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_rtree_query_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).apSqlParam) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_rtree_query_info),
                "::",
                stringify!(apSqlParam)
            )
        );
    }
    test_field_apSqlParam();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fts5Context {
    _unused: [u8; 0],
}
pub type fts5_extension_function = ::std::option::Option<
    unsafe extern "C" fn(
        pApi: *const Fts5ExtensionApi,
        pFts: *mut Fts5Context,
        pCtx: *mut sqlite3_context,
        nVal: ::std::os::raw::c_int,
        apVal: *mut *mut sqlite3_value,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fts5PhraseIter {
    pub a: *const ::std::os::raw::c_uchar,
    pub b: *const ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_Fts5PhraseIter() {
    assert_eq!(
        ::std::mem::size_of::<Fts5PhraseIter>(),
        16usize,
        concat!("Size of: ", stringify!(Fts5PhraseIter))
    );
    assert_eq!(
        ::std::mem::align_of::<Fts5PhraseIter>(),
        8usize,
        concat!("Alignment of ", stringify!(Fts5PhraseIter))
    );
    fn test_field_a() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5PhraseIter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5PhraseIter),
                "::",
                stringify!(a)
            )
        );
    }
    test_field_a();
    fn test_field_b() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5PhraseIter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5PhraseIter),
                "::",
                stringify!(b)
            )
        );
    }
    test_field_b();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fts5ExtensionApi {
    pub iVersion: ::std::os::raw::c_int,
    pub xUserData: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut Fts5Context) -> *mut ::std::os::raw::c_void,
    >,
    pub xColumnCount: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut Fts5Context) -> ::std::os::raw::c_int,
    >,
    pub xRowCount: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Fts5Context,
            pnRow: *mut sqlite3_int64,
        ) -> ::std::os::raw::c_int,
    >,
    pub xColumnTotalSize: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Fts5Context,
            iCol: ::std::os::raw::c_int,
            pnToken: *mut sqlite3_int64,
        ) -> ::std::os::raw::c_int,
    >,
    pub xTokenize: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Fts5Context,
            pText: *const ::std::os::raw::c_char,
            nText: ::std::os::raw::c_int,
            pCtx: *mut ::std::os::raw::c_void,
            xToken: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: ::std::os::raw::c_int,
                    arg3: *const ::std::os::raw::c_char,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >,
        ) -> ::std::os::raw::c_int,
    >,
    pub xPhraseCount: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut Fts5Context) -> ::std::os::raw::c_int,
    >,
    pub xPhraseSize: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Fts5Context,
            iPhrase: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xInstCount: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Fts5Context,
            pnInst: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xInst: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Fts5Context,
            iIdx: ::std::os::raw::c_int,
            piPhrase: *mut ::std::os::raw::c_int,
            piCol: *mut ::std::os::raw::c_int,
            piOff: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xRowid:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut Fts5Context) -> sqlite3_int64>,
    pub xColumnText: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Fts5Context,
            iCol: ::std::os::raw::c_int,
            pz: *mut *const ::std::os::raw::c_char,
            pn: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xColumnSize: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Fts5Context,
            iCol: ::std::os::raw::c_int,
            pnToken: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xQueryPhrase: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Fts5Context,
            iPhrase: ::std::os::raw::c_int,
            pUserData: *mut ::std::os::raw::c_void,
            arg2: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *const Fts5ExtensionApi,
                    arg2: *mut Fts5Context,
                    arg3: *mut ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
        ) -> ::std::os::raw::c_int,
    >,
    pub xSetAuxdata: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Fts5Context,
            pAux: *mut ::std::os::raw::c_void,
            xDelete: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ) -> ::std::os::raw::c_int,
    >,
    pub xGetAuxdata: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Fts5Context,
            bClear: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub xPhraseFirst: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Fts5Context,
            iPhrase: ::std::os::raw::c_int,
            arg2: *mut Fts5PhraseIter,
            arg3: *mut ::std::os::raw::c_int,
            arg4: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xPhraseNext: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Fts5Context,
            arg2: *mut Fts5PhraseIter,
            piCol: *mut ::std::os::raw::c_int,
            piOff: *mut ::std::os::raw::c_int,
        ),
    >,
    pub xPhraseFirstColumn: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Fts5Context,
            iPhrase: ::std::os::raw::c_int,
            arg2: *mut Fts5PhraseIter,
            arg3: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub xPhraseNextColumn: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Fts5Context,
            arg2: *mut Fts5PhraseIter,
            piCol: *mut ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout_Fts5ExtensionApi() {
    assert_eq!(
        ::std::mem::size_of::<Fts5ExtensionApi>(),
        160usize,
        concat!("Size of: ", stringify!(Fts5ExtensionApi))
    );
    assert_eq!(
        ::std::mem::align_of::<Fts5ExtensionApi>(),
        8usize,
        concat!("Alignment of ", stringify!(Fts5ExtensionApi))
    );
    fn test_field_iVersion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5ExtensionApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iVersion) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5ExtensionApi),
                "::",
                stringify!(iVersion)
            )
        );
    }
    test_field_iVersion();
    fn test_field_xUserData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5ExtensionApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xUserData) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5ExtensionApi),
                "::",
                stringify!(xUserData)
            )
        );
    }
    test_field_xUserData();
    fn test_field_xColumnCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5ExtensionApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xColumnCount) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5ExtensionApi),
                "::",
                stringify!(xColumnCount)
            )
        );
    }
    test_field_xColumnCount();
    fn test_field_xRowCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5ExtensionApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xRowCount) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5ExtensionApi),
                "::",
                stringify!(xRowCount)
            )
        );
    }
    test_field_xRowCount();
    fn test_field_xColumnTotalSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5ExtensionApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xColumnTotalSize) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5ExtensionApi),
                "::",
                stringify!(xColumnTotalSize)
            )
        );
    }
    test_field_xColumnTotalSize();
    fn test_field_xTokenize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5ExtensionApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xTokenize) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5ExtensionApi),
                "::",
                stringify!(xTokenize)
            )
        );
    }
    test_field_xTokenize();
    fn test_field_xPhraseCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5ExtensionApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xPhraseCount) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5ExtensionApi),
                "::",
                stringify!(xPhraseCount)
            )
        );
    }
    test_field_xPhraseCount();
    fn test_field_xPhraseSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5ExtensionApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xPhraseSize) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5ExtensionApi),
                "::",
                stringify!(xPhraseSize)
            )
        );
    }
    test_field_xPhraseSize();
    fn test_field_xInstCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5ExtensionApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xInstCount) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5ExtensionApi),
                "::",
                stringify!(xInstCount)
            )
        );
    }
    test_field_xInstCount();
    fn test_field_xInst() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5ExtensionApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xInst) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5ExtensionApi),
                "::",
                stringify!(xInst)
            )
        );
    }
    test_field_xInst();
    fn test_field_xRowid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5ExtensionApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xRowid) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5ExtensionApi),
                "::",
                stringify!(xRowid)
            )
        );
    }
    test_field_xRowid();
    fn test_field_xColumnText() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5ExtensionApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xColumnText) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5ExtensionApi),
                "::",
                stringify!(xColumnText)
            )
        );
    }
    test_field_xColumnText();
    fn test_field_xColumnSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5ExtensionApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xColumnSize) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5ExtensionApi),
                "::",
                stringify!(xColumnSize)
            )
        );
    }
    test_field_xColumnSize();
    fn test_field_xQueryPhrase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5ExtensionApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xQueryPhrase) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5ExtensionApi),
                "::",
                stringify!(xQueryPhrase)
            )
        );
    }
    test_field_xQueryPhrase();
    fn test_field_xSetAuxdata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5ExtensionApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xSetAuxdata) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5ExtensionApi),
                "::",
                stringify!(xSetAuxdata)
            )
        );
    }
    test_field_xSetAuxdata();
    fn test_field_xGetAuxdata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5ExtensionApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xGetAuxdata) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5ExtensionApi),
                "::",
                stringify!(xGetAuxdata)
            )
        );
    }
    test_field_xGetAuxdata();
    fn test_field_xPhraseFirst() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5ExtensionApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xPhraseFirst) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5ExtensionApi),
                "::",
                stringify!(xPhraseFirst)
            )
        );
    }
    test_field_xPhraseFirst();
    fn test_field_xPhraseNext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5ExtensionApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xPhraseNext) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5ExtensionApi),
                "::",
                stringify!(xPhraseNext)
            )
        );
    }
    test_field_xPhraseNext();
    fn test_field_xPhraseFirstColumn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5ExtensionApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xPhraseFirstColumn) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5ExtensionApi),
                "::",
                stringify!(xPhraseFirstColumn)
            )
        );
    }
    test_field_xPhraseFirstColumn();
    fn test_field_xPhraseNextColumn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Fts5ExtensionApi>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xPhraseNextColumn) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(Fts5ExtensionApi),
                "::",
                stringify!(xPhraseNextColumn)
            )
        );
    }
    test_field_xPhraseNextColumn();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fts5Tokenizer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fts5_tokenizer {
    pub xCreate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            azArg: *mut *const ::std::os::raw::c_char,
            nArg: ::std::os::raw::c_int,
            ppOut: *mut *mut Fts5Tokenizer,
        ) -> ::std::os::raw::c_int,
    >,
    pub xDelete: ::std::option::Option<unsafe extern "C" fn(arg1: *mut Fts5Tokenizer)>,
    pub xTokenize: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Fts5Tokenizer,
            pCtx: *mut ::std::os::raw::c_void,
            flags: ::std::os::raw::c_int,
            pText: *const ::std::os::raw::c_char,
            nText: ::std::os::raw::c_int,
            xToken: ::std::option::Option<
                unsafe extern "C" fn(
                    pCtx: *mut ::std::os::raw::c_void,
                    tflags: ::std::os::raw::c_int,
                    pToken: *const ::std::os::raw::c_char,
                    nToken: ::std::os::raw::c_int,
                    iStart: ::std::os::raw::c_int,
                    iEnd: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_fts5_tokenizer() {
    assert_eq!(
        ::std::mem::size_of::<fts5_tokenizer>(),
        24usize,
        concat!("Size of: ", stringify!(fts5_tokenizer))
    );
    assert_eq!(
        ::std::mem::align_of::<fts5_tokenizer>(),
        8usize,
        concat!("Alignment of ", stringify!(fts5_tokenizer))
    );
    fn test_field_xCreate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<fts5_tokenizer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xCreate) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(fts5_tokenizer),
                "::",
                stringify!(xCreate)
            )
        );
    }
    test_field_xCreate();
    fn test_field_xDelete() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<fts5_tokenizer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xDelete) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(fts5_tokenizer),
                "::",
                stringify!(xDelete)
            )
        );
    }
    test_field_xDelete();
    fn test_field_xTokenize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<fts5_tokenizer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xTokenize) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(fts5_tokenizer),
                "::",
                stringify!(xTokenize)
            )
        );
    }
    test_field_xTokenize();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fts5_api {
    pub iVersion: ::std::os::raw::c_int,
    pub xCreateTokenizer: ::std::option::Option<
        unsafe extern "C" fn(
            pApi: *mut fts5_api,
            zName: *const ::std::os::raw::c_char,
            pContext: *mut ::std::os::raw::c_void,
            pTokenizer: *mut fts5_tokenizer,
            xDestroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ) -> ::std::os::raw::c_int,
    >,
    pub xFindTokenizer: ::std::option::Option<
        unsafe extern "C" fn(
            pApi: *mut fts5_api,
            zName: *const ::std::os::raw::c_char,
            ppContext: *mut *mut ::std::os::raw::c_void,
            pTokenizer: *mut fts5_tokenizer,
        ) -> ::std::os::raw::c_int,
    >,
    pub xCreateFunction: ::std::option::Option<
        unsafe extern "C" fn(
            pApi: *mut fts5_api,
            zName: *const ::std::os::raw::c_char,
            pContext: *mut ::std::os::raw::c_void,
            xFunction: fts5_extension_function,
            xDestroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_fts5_api() {
    assert_eq!(
        ::std::mem::size_of::<fts5_api>(),
        32usize,
        concat!("Size of: ", stringify!(fts5_api))
    );
    assert_eq!(
        ::std::mem::align_of::<fts5_api>(),
        8usize,
        concat!("Alignment of ", stringify!(fts5_api))
    );
    fn test_field_iVersion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<fts5_api>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iVersion) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(fts5_api),
                "::",
                stringify!(iVersion)
            )
        );
    }
    test_field_iVersion();
    fn test_field_xCreateTokenizer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<fts5_api>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xCreateTokenizer) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(fts5_api),
                "::",
                stringify!(xCreateTokenizer)
            )
        );
    }
    test_field_xCreateTokenizer();
    fn test_field_xFindTokenizer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<fts5_api>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xFindTokenizer) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(fts5_api),
                "::",
                stringify!(xFindTokenizer)
            )
        );
    }
    test_field_xFindTokenizer();
    fn test_field_xCreateFunction() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<fts5_api>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xCreateFunction) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(fts5_api),
                "::",
                stringify!(xCreateFunction)
            )
        );
    }
    test_field_xCreateFunction();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_api_routines {
    pub aggregate_context: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_context,
            nBytes: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub aggregate_count: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_context) -> ::std::os::raw::c_int,
    >,
    pub bind_blob: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
            arg3: *const ::std::os::raw::c_void,
            n: ::std::os::raw::c_int,
            arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ) -> ::std::os::raw::c_int,
    >,
    pub bind_double: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
            arg3: f64,
        ) -> ::std::os::raw::c_int,
    >,
    pub bind_int: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub bind_int64: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
            arg3: sqlite_int64,
        ) -> ::std::os::raw::c_int,
    >,
    pub bind_null: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub bind_parameter_count: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_stmt) -> ::std::os::raw::c_int,
    >,
    pub bind_parameter_index: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            zName: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub bind_parameter_name: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub bind_text: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
            arg3: *const ::std::os::raw::c_char,
            n: ::std::os::raw::c_int,
            arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ) -> ::std::os::raw::c_int,
    >,
    pub bind_text16: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
            arg3: *const ::std::os::raw::c_void,
            arg4: ::std::os::raw::c_int,
            arg5: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ) -> ::std::os::raw::c_int,
    >,
    pub bind_value: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
            arg3: *const sqlite3_value,
        ) -> ::std::os::raw::c_int,
    >,
    pub busy_handler: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >,
            arg3: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub busy_timeout: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            ms: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub changes:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3) -> ::std::os::raw::c_int>,
    pub close:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3) -> ::std::os::raw::c_int>,
    pub collation_needed: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *mut ::std::os::raw::c_void,
            arg3: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: *mut sqlite3,
                    eTextRep: ::std::os::raw::c_int,
                    arg3: *const ::std::os::raw::c_char,
                ),
            >,
        ) -> ::std::os::raw::c_int,
    >,
    pub collation_needed16: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *mut ::std::os::raw::c_void,
            arg3: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: *mut sqlite3,
                    eTextRep: ::std::os::raw::c_int,
                    arg3: *const ::std::os::raw::c_void,
                ),
            >,
        ) -> ::std::os::raw::c_int,
    >,
    pub column_blob: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            iCol: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub column_bytes: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            iCol: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub column_bytes16: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            iCol: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub column_count: ::std::option::Option<
        unsafe extern "C" fn(pStmt: *mut sqlite3_stmt) -> ::std::os::raw::c_int,
    >,
    pub column_database_name: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub column_database_name16: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub column_decltype: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            i: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub column_decltype16: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub column_double: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_stmt, iCol: ::std::os::raw::c_int) -> f64,
    >,
    pub column_int: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            iCol: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub column_int64: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_stmt, iCol: ::std::os::raw::c_int) -> sqlite_int64,
    >,
    pub column_name: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub column_name16: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub column_origin_name: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub column_origin_name16: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub column_table_name: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub column_table_name16: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub column_text: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            iCol: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_uchar,
    >,
    pub column_text16: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            iCol: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub column_type: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            iCol: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub column_value: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            iCol: ::std::os::raw::c_int,
        ) -> *mut sqlite3_value,
    >,
    pub commit_hook: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
            >,
            arg3: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub complete: ::std::option::Option<
        unsafe extern "C" fn(sql: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub complete16: ::std::option::Option<
        unsafe extern "C" fn(sql: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub create_collation: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
            arg4: *mut ::std::os::raw::c_void,
            arg5: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: ::std::os::raw::c_int,
                    arg3: *const ::std::os::raw::c_void,
                    arg4: ::std::os::raw::c_int,
                    arg5: *const ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
        ) -> ::std::os::raw::c_int,
    >,
    pub create_collation16: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_void,
            arg3: ::std::os::raw::c_int,
            arg4: *mut ::std::os::raw::c_void,
            arg5: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: ::std::os::raw::c_int,
                    arg3: *const ::std::os::raw::c_void,
                    arg4: ::std::os::raw::c_int,
                    arg5: *const ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
        ) -> ::std::os::raw::c_int,
    >,
    pub create_function: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
            arg5: *mut ::std::os::raw::c_void,
            xFunc: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut sqlite3_context,
                    arg2: ::std::os::raw::c_int,
                    arg3: *mut *mut sqlite3_value,
                ),
            >,
            xStep: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut sqlite3_context,
                    arg2: ::std::os::raw::c_int,
                    arg3: *mut *mut sqlite3_value,
                ),
            >,
            xFinal: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_context)>,
        ) -> ::std::os::raw::c_int,
    >,
    pub create_function16: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_void,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
            arg5: *mut ::std::os::raw::c_void,
            xFunc: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut sqlite3_context,
                    arg2: ::std::os::raw::c_int,
                    arg3: *mut *mut sqlite3_value,
                ),
            >,
            xStep: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut sqlite3_context,
                    arg2: ::std::os::raw::c_int,
                    arg3: *mut *mut sqlite3_value,
                ),
            >,
            xFinal: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_context)>,
        ) -> ::std::os::raw::c_int,
    >,
    pub create_module: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const sqlite3_module,
            arg4: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub data_count: ::std::option::Option<
        unsafe extern "C" fn(pStmt: *mut sqlite3_stmt) -> ::std::os::raw::c_int,
    >,
    pub db_handle:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_stmt) -> *mut sqlite3>,
    pub declare_vtab: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub enable_shared_cache: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub errcode:
        ::std::option::Option<unsafe extern "C" fn(db: *mut sqlite3) -> ::std::os::raw::c_int>,
    pub errmsg: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3) -> *const ::std::os::raw::c_char,
    >,
    pub errmsg16: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3) -> *const ::std::os::raw::c_void,
    >,
    pub exec: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
            arg3: sqlite3_callback,
            arg4: *mut ::std::os::raw::c_void,
            arg5: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub expired: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_stmt) -> ::std::os::raw::c_int,
    >,
    pub finalize: ::std::option::Option<
        unsafe extern "C" fn(pStmt: *mut sqlite3_stmt) -> ::std::os::raw::c_int,
    >,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub free_table:
        ::std::option::Option<unsafe extern "C" fn(result: *mut *mut ::std::os::raw::c_char)>,
    pub get_autocommit:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3) -> ::std::os::raw::c_int>,
    pub get_auxdata: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_context,
            arg2: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub get_table: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut *mut *mut ::std::os::raw::c_char,
            arg4: *mut ::std::os::raw::c_int,
            arg5: *mut ::std::os::raw::c_int,
            arg6: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub global_recover: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub interruptx: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3)>,
    pub last_insert_rowid:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3) -> sqlite_int64>,
    pub libversion: ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub libversion_number: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub malloc: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void,
    >,
    pub mprintf: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            ...
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut *mut sqlite3,
        ) -> ::std::os::raw::c_int,
    >,
    pub open16: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: *mut *mut sqlite3,
        ) -> ::std::os::raw::c_int,
    >,
    pub prepare: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
            arg4: *mut *mut sqlite3_stmt,
            arg5: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub prepare16: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_void,
            arg3: ::std::os::raw::c_int,
            arg4: *mut *mut sqlite3_stmt,
            arg5: *mut *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub profile: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: sqlite_uint64,
                ),
            >,
            arg3: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub progress_handler: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
            >,
            arg4: *mut ::std::os::raw::c_void,
        ),
    >,
    pub realloc: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub reset: ::std::option::Option<
        unsafe extern "C" fn(pStmt: *mut sqlite3_stmt) -> ::std::os::raw::c_int,
    >,
    pub result_blob: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_context,
            arg2: *const ::std::os::raw::c_void,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ),
    >,
    pub result_double:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_context, arg2: f64)>,
    pub result_error: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_context,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ),
    >,
    pub result_error16: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_context,
            arg2: *const ::std::os::raw::c_void,
            arg3: ::std::os::raw::c_int,
        ),
    >,
    pub result_int: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_context, arg2: ::std::os::raw::c_int),
    >,
    pub result_int64:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_context, arg2: sqlite_int64)>,
    pub result_null: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_context)>,
    pub result_text: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_context,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ),
    >,
    pub result_text16: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_context,
            arg2: *const ::std::os::raw::c_void,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ),
    >,
    pub result_text16be: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_context,
            arg2: *const ::std::os::raw::c_void,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ),
    >,
    pub result_text16le: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_context,
            arg2: *const ::std::os::raw::c_void,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ),
    >,
    pub result_value: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_context, arg2: *mut sqlite3_value),
    >,
    pub rollback_hook: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
            arg3: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub set_authorizer: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: ::std::os::raw::c_int,
                    arg3: *const ::std::os::raw::c_char,
                    arg4: *const ::std::os::raw::c_char,
                    arg5: *const ::std::os::raw::c_char,
                    arg6: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >,
            arg3: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_auxdata: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_context,
            arg2: ::std::os::raw::c_int,
            arg3: *mut ::std::os::raw::c_void,
            arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ),
    >,
    pub xsnprintf: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
            ...
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub step: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_stmt) -> ::std::os::raw::c_int,
    >,
    pub table_column_metadata: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
            arg4: *const ::std::os::raw::c_char,
            arg5: *mut *const ::std::os::raw::c_char,
            arg6: *mut *const ::std::os::raw::c_char,
            arg7: *mut ::std::os::raw::c_int,
            arg8: *mut ::std::os::raw::c_int,
            arg9: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub thread_cleanup: ::std::option::Option<unsafe extern "C" fn()>,
    pub total_changes:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3) -> ::std::os::raw::c_int>,
    pub trace: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            xTrace: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: *const ::std::os::raw::c_char,
                ),
            >,
            arg2: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub transfer_bindings: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: *mut sqlite3_stmt,
        ) -> ::std::os::raw::c_int,
    >,
    pub update_hook: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: ::std::os::raw::c_int,
                    arg3: *const ::std::os::raw::c_char,
                    arg4: *const ::std::os::raw::c_char,
                    arg5: sqlite_int64,
                ),
            >,
            arg3: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub user_data: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_context) -> *mut ::std::os::raw::c_void,
    >,
    pub value_blob: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_value) -> *const ::std::os::raw::c_void,
    >,
    pub value_bytes: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_value) -> ::std::os::raw::c_int,
    >,
    pub value_bytes16: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_value) -> ::std::os::raw::c_int,
    >,
    pub value_double: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_value) -> f64>,
    pub value_int: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_value) -> ::std::os::raw::c_int,
    >,
    pub value_int64:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_value) -> sqlite_int64>,
    pub value_numeric_type: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_value) -> ::std::os::raw::c_int,
    >,
    pub value_text: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_value) -> *const ::std::os::raw::c_uchar,
    >,
    pub value_text16: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_value) -> *const ::std::os::raw::c_void,
    >,
    pub value_text16be: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_value) -> *const ::std::os::raw::c_void,
    >,
    pub value_text16le: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_value) -> *const ::std::os::raw::c_void,
    >,
    pub value_type: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_value) -> ::std::os::raw::c_int,
    >,
    pub vmprintf: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut __va_list_tag,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub overload_function: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            zFuncName: *const ::std::os::raw::c_char,
            nArg: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub prepare_v2: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
            arg4: *mut *mut sqlite3_stmt,
            arg5: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub prepare16_v2: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_void,
            arg3: ::std::os::raw::c_int,
            arg4: *mut *mut sqlite3_stmt,
            arg5: *mut *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub clear_bindings: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_stmt) -> ::std::os::raw::c_int,
    >,
    pub create_module_v2: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const sqlite3_module,
            arg4: *mut ::std::os::raw::c_void,
            xDestroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ) -> ::std::os::raw::c_int,
    >,
    pub bind_zeroblob: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub blob_bytes: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_blob) -> ::std::os::raw::c_int,
    >,
    pub blob_close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_blob) -> ::std::os::raw::c_int,
    >,
    pub blob_open: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
            arg4: *const ::std::os::raw::c_char,
            arg5: sqlite3_int64,
            arg6: ::std::os::raw::c_int,
            arg7: *mut *mut sqlite3_blob,
        ) -> ::std::os::raw::c_int,
    >,
    pub blob_read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_blob,
            arg2: *mut ::std::os::raw::c_void,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub blob_write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_blob,
            arg2: *const ::std::os::raw::c_void,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub create_collation_v2: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
            arg4: *mut ::std::os::raw::c_void,
            arg5: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: ::std::os::raw::c_int,
                    arg3: *const ::std::os::raw::c_void,
                    arg4: ::std::os::raw::c_int,
                    arg5: *const ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
            arg6: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ) -> ::std::os::raw::c_int,
    >,
    pub file_control: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
            arg4: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub memory_highwater:
        ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> sqlite3_int64>,
    pub memory_used: ::std::option::Option<unsafe extern "C" fn() -> sqlite3_int64>,
    pub mutex_alloc: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> *mut sqlite3_mutex,
    >,
    pub mutex_enter: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_mutex)>,
    pub mutex_free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_mutex)>,
    pub mutex_leave: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_mutex)>,
    pub mutex_try: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_mutex) -> ::std::os::raw::c_int,
    >,
    pub open_v2: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut *mut sqlite3,
            arg3: ::std::os::raw::c_int,
            arg4: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub release_memory: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub result_error_nomem: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_context)>,
    pub result_error_toobig:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_context)>,
    pub sleep: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub soft_heap_limit: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub vfs_find: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> *mut sqlite3_vfs,
    >,
    pub vfs_register: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_vfs,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub vfs_unregister: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_vfs) -> ::std::os::raw::c_int,
    >,
    pub xthreadsafe: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub result_zeroblob: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_context, arg2: ::std::os::raw::c_int),
    >,
    pub result_error_code: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_context, arg2: ::std::os::raw::c_int),
    >,
    pub test_control: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int,
    >,
    pub randomness: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: *mut ::std::os::raw::c_void),
    >,
    pub context_db_handle:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_context) -> *mut sqlite3>,
    pub extended_result_codes: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub limit: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub next_stmt: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3, arg2: *mut sqlite3_stmt) -> *mut sqlite3_stmt,
    >,
    pub sql: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_stmt) -> *const ::std::os::raw::c_char,
    >,
    pub status: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut ::std::os::raw::c_int,
            arg3: *mut ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub backup_finish: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_backup) -> ::std::os::raw::c_int,
    >,
    pub backup_init: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut sqlite3,
            arg4: *const ::std::os::raw::c_char,
        ) -> *mut sqlite3_backup,
    >,
    pub backup_pagecount: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_backup) -> ::std::os::raw::c_int,
    >,
    pub backup_remaining: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_backup) -> ::std::os::raw::c_int,
    >,
    pub backup_step: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_backup,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub compileoption_get: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char,
    >,
    pub compileoption_used: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub create_function_v2: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
            arg5: *mut ::std::os::raw::c_void,
            xFunc: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut sqlite3_context,
                    arg2: ::std::os::raw::c_int,
                    arg3: *mut *mut sqlite3_value,
                ),
            >,
            xStep: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut sqlite3_context,
                    arg2: ::std::os::raw::c_int,
                    arg3: *mut *mut sqlite3_value,
                ),
            >,
            xFinal: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_context)>,
            xDestroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ) -> ::std::os::raw::c_int,
    >,
    pub db_config: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: ::std::os::raw::c_int,
            ...
        ) -> ::std::os::raw::c_int,
    >,
    pub db_mutex:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3) -> *mut sqlite3_mutex>,
    pub db_status: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: ::std::os::raw::c_int,
            arg3: *mut ::std::os::raw::c_int,
            arg4: *mut ::std::os::raw::c_int,
            arg5: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub extended_errcode:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3) -> ::std::os::raw::c_int>,
    pub log: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...),
    >,
    pub soft_heap_limit64:
        ::std::option::Option<unsafe extern "C" fn(arg1: sqlite3_int64) -> sqlite3_int64>,
    pub sourceid: ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub stmt_status: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub strnicmp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub unlock_notify: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *mut ::std::os::raw::c_void,
                    arg2: ::std::os::raw::c_int,
                ),
            >,
            arg3: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub wal_autocheckpoint: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub wal_checkpoint: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub wal_hook: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: *mut sqlite3,
                    arg3: *const ::std::os::raw::c_char,
                    arg4: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >,
            arg3: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub blob_reopen: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_blob, arg2: sqlite3_int64) -> ::std::os::raw::c_int,
    >,
    pub vtab_config: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            op: ::std::os::raw::c_int,
            ...
        ) -> ::std::os::raw::c_int,
    >,
    pub vtab_on_conflict:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3) -> ::std::os::raw::c_int>,
    pub close_v2:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3) -> ::std::os::raw::c_int>,
    pub db_filename: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub db_readonly: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub db_release_memory:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3) -> ::std::os::raw::c_int>,
    pub errstr: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char,
    >,
    pub stmt_busy: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_stmt) -> ::std::os::raw::c_int,
    >,
    pub stmt_readonly: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_stmt) -> ::std::os::raw::c_int,
    >,
    pub stricmp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub uri_boolean: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub uri_int64: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: sqlite3_int64,
        ) -> sqlite3_int64,
    >,
    pub uri_parameter: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub xvsnprintf: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
            arg4: *mut __va_list_tag,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub wal_checkpoint_v2: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
            arg4: *mut ::std::os::raw::c_int,
            arg5: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub auto_extension: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int,
    >,
    pub bind_blob64: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
            arg3: *const ::std::os::raw::c_void,
            arg4: sqlite3_uint64,
            arg5: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ) -> ::std::os::raw::c_int,
    >,
    pub bind_text64: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
            arg3: *const ::std::os::raw::c_char,
            arg4: sqlite3_uint64,
            arg5: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
            arg6: ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
    >,
    pub cancel_auto_extension: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int,
    >,
    pub load_extension: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
            arg4: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub malloc64: ::std::option::Option<
        unsafe extern "C" fn(arg1: sqlite3_uint64) -> *mut ::std::os::raw::c_void,
    >,
    pub msize: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> sqlite3_uint64,
    >,
    pub realloc64: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: sqlite3_uint64,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub reset_auto_extension: ::std::option::Option<unsafe extern "C" fn()>,
    pub result_blob64: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_context,
            arg2: *const ::std::os::raw::c_void,
            arg3: sqlite3_uint64,
            arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ),
    >,
    pub result_text64: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_context,
            arg2: *const ::std::os::raw::c_char,
            arg3: sqlite3_uint64,
            arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
            arg5: ::std::os::raw::c_uchar,
        ),
    >,
    pub strglob: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub value_dup: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const sqlite3_value) -> *mut sqlite3_value,
    >,
    pub value_free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_value)>,
    pub result_zeroblob64: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_context,
            arg2: sqlite3_uint64,
        ) -> ::std::os::raw::c_int,
    >,
    pub bind_zeroblob64: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
            arg3: sqlite3_uint64,
        ) -> ::std::os::raw::c_int,
    >,
    pub value_subtype: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_value) -> ::std::os::raw::c_uint,
    >,
    pub result_subtype: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_context, arg2: ::std::os::raw::c_uint),
    >,
    pub status64: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut sqlite3_int64,
            arg3: *mut sqlite3_int64,
            arg4: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub strlike: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub db_cacheflush:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3) -> ::std::os::raw::c_int>,
    pub system_errno:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3) -> ::std::os::raw::c_int>,
    pub trace_v2: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: ::std::os::raw::c_uint,
            arg3: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: ::std::os::raw::c_uint,
                    arg2: *mut ::std::os::raw::c_void,
                    arg3: *mut ::std::os::raw::c_void,
                    arg4: *mut ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
            arg4: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub expanded_sql: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_stmt) -> *mut ::std::os::raw::c_char,
    >,
    pub set_last_insert_rowid:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3, arg2: sqlite3_int64)>,
    pub prepare_v3: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_uint,
            arg5: *mut *mut sqlite3_stmt,
            arg6: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub prepare16_v3: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_void,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_uint,
            arg5: *mut *mut sqlite3_stmt,
            arg6: *mut *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub bind_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_stmt,
            arg2: ::std::os::raw::c_int,
            arg3: *mut ::std::os::raw::c_void,
            arg4: *const ::std::os::raw::c_char,
            arg5: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ) -> ::std::os::raw::c_int,
    >,
    pub result_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_context,
            arg2: *mut ::std::os::raw::c_void,
            arg3: *const ::std::os::raw::c_char,
            arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ),
    >,
    pub value_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_value,
            arg2: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub vtab_nochange: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_context) -> ::std::os::raw::c_int,
    >,
    pub value_nochange: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_value) -> ::std::os::raw::c_int,
    >,
    pub vtab_collation: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_index_info,
            arg2: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub keyword_count: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub keyword_name: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut *const ::std::os::raw::c_char,
            arg3: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub keyword_check: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub str_new:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3) -> *mut sqlite3_str>,
    pub str_finish: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_str) -> *mut ::std::os::raw::c_char,
    >,
    pub str_appendf: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_str, zFormat: *const ::std::os::raw::c_char, ...),
    >,
    pub str_vappendf: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_str,
            zFormat: *const ::std::os::raw::c_char,
            arg2: *mut __va_list_tag,
        ),
    >,
    pub str_append: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_str,
            zIn: *const ::std::os::raw::c_char,
            N: ::std::os::raw::c_int,
        ),
    >,
    pub str_appendall: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_str, zIn: *const ::std::os::raw::c_char),
    >,
    pub str_appendchar: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_str,
            N: ::std::os::raw::c_int,
            C: ::std::os::raw::c_char,
        ),
    >,
    pub str_reset: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_str)>,
    pub str_errcode: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_str) -> ::std::os::raw::c_int,
    >,
    pub str_length: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_str) -> ::std::os::raw::c_int,
    >,
    pub str_value: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_str) -> *mut ::std::os::raw::c_char,
    >,
    pub create_window_function: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
            arg5: *mut ::std::os::raw::c_void,
            xStep: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut sqlite3_context,
                    arg2: ::std::os::raw::c_int,
                    arg3: *mut *mut sqlite3_value,
                ),
            >,
            xFinal: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_context)>,
            xValue: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3_context)>,
            xInv: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut sqlite3_context,
                    arg2: ::std::os::raw::c_int,
                    arg3: *mut *mut sqlite3_value,
                ),
            >,
            xDestroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ) -> ::std::os::raw::c_int,
    >,
    pub normalized_sql: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_stmt) -> *const ::std::os::raw::c_char,
    >,
    pub stmt_isexplain: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_stmt) -> ::std::os::raw::c_int,
    >,
    pub value_frombind: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_value) -> ::std::os::raw::c_int,
    >,
    pub drop_modules: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub hard_heap_limit64:
        ::std::option::Option<unsafe extern "C" fn(arg1: sqlite3_int64) -> sqlite3_int64>,
    pub uri_key: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub filename_database: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char,
    >,
    pub filename_journal: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char,
    >,
    pub filename_wal: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char,
    >,
    pub create_filename: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
            arg4: ::std::os::raw::c_int,
            arg5: *mut *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub free_filename:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_char)>,
    pub database_file_object: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> *mut sqlite3_file,
    >,
    pub txn_state: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub changes64: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3) -> sqlite3_int64>,
    pub total_changes64:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3) -> sqlite3_int64>,
    pub autovacuum_pages: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3,
            arg2: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_uint,
                    arg4: ::std::os::raw::c_uint,
                    arg5: ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_uint,
            >,
            arg3: *mut ::std::os::raw::c_void,
            arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ) -> ::std::os::raw::c_int,
    >,
    pub error_offset:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut sqlite3) -> ::std::os::raw::c_int>,
    pub vtab_rhs_value: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_index_info,
            arg2: ::std::os::raw::c_int,
            arg3: *mut *mut sqlite3_value,
        ) -> ::std::os::raw::c_int,
    >,
    pub vtab_distinct: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut sqlite3_index_info) -> ::std::os::raw::c_int,
    >,
    pub vtab_in: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_index_info,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub vtab_in_first: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_value,
            arg2: *mut *mut sqlite3_value,
        ) -> ::std::os::raw::c_int,
    >,
    pub vtab_in_next: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut sqlite3_value,
            arg2: *mut *mut sqlite3_value,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_sqlite3_api_routines() {
    assert_eq!(
        ::std::mem::size_of::<sqlite3_api_routines>(),
        2096usize,
        concat!("Size of: ", stringify!(sqlite3_api_routines))
    );
    assert_eq!(
        ::std::mem::align_of::<sqlite3_api_routines>(),
        8usize,
        concat!("Alignment of ", stringify!(sqlite3_api_routines))
    );
    fn test_field_aggregate_context() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aggregate_context) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(aggregate_context)
            )
        );
    }
    test_field_aggregate_context();
    fn test_field_aggregate_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aggregate_count) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(aggregate_count)
            )
        );
    }
    test_field_aggregate_count();
    fn test_field_bind_blob() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_blob) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(bind_blob)
            )
        );
    }
    test_field_bind_blob();
    fn test_field_bind_double() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_double) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(bind_double)
            )
        );
    }
    test_field_bind_double();
    fn test_field_bind_int() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_int) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(bind_int)
            )
        );
    }
    test_field_bind_int();
    fn test_field_bind_int64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_int64) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(bind_int64)
            )
        );
    }
    test_field_bind_int64();
    fn test_field_bind_null() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_null) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(bind_null)
            )
        );
    }
    test_field_bind_null();
    fn test_field_bind_parameter_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_parameter_count) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(bind_parameter_count)
            )
        );
    }
    test_field_bind_parameter_count();
    fn test_field_bind_parameter_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_parameter_index) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(bind_parameter_index)
            )
        );
    }
    test_field_bind_parameter_index();
    fn test_field_bind_parameter_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_parameter_name) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(bind_parameter_name)
            )
        );
    }
    test_field_bind_parameter_name();
    fn test_field_bind_text() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_text) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(bind_text)
            )
        );
    }
    test_field_bind_text();
    fn test_field_bind_text16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_text16) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(bind_text16)
            )
        );
    }
    test_field_bind_text16();
    fn test_field_bind_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_value) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(bind_value)
            )
        );
    }
    test_field_bind_value();
    fn test_field_busy_handler() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).busy_handler) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(busy_handler)
            )
        );
    }
    test_field_busy_handler();
    fn test_field_busy_timeout() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).busy_timeout) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(busy_timeout)
            )
        );
    }
    test_field_busy_timeout();
    fn test_field_changes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).changes) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(changes)
            )
        );
    }
    test_field_changes();
    fn test_field_close() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(close)
            )
        );
    }
    test_field_close();
    fn test_field_collation_needed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).collation_needed) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(collation_needed)
            )
        );
    }
    test_field_collation_needed();
    fn test_field_collation_needed16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).collation_needed16) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(collation_needed16)
            )
        );
    }
    test_field_collation_needed16();
    fn test_field_column_blob() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_blob) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_blob)
            )
        );
    }
    test_field_column_blob();
    fn test_field_column_bytes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_bytes) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_bytes)
            )
        );
    }
    test_field_column_bytes();
    fn test_field_column_bytes16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_bytes16) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_bytes16)
            )
        );
    }
    test_field_column_bytes16();
    fn test_field_column_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_count) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_count)
            )
        );
    }
    test_field_column_count();
    fn test_field_column_database_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_database_name) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_database_name)
            )
        );
    }
    test_field_column_database_name();
    fn test_field_column_database_name16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_database_name16) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_database_name16)
            )
        );
    }
    test_field_column_database_name16();
    fn test_field_column_decltype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_decltype) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_decltype)
            )
        );
    }
    test_field_column_decltype();
    fn test_field_column_decltype16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_decltype16) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_decltype16)
            )
        );
    }
    test_field_column_decltype16();
    fn test_field_column_double() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_double) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_double)
            )
        );
    }
    test_field_column_double();
    fn test_field_column_int() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_int) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_int)
            )
        );
    }
    test_field_column_int();
    fn test_field_column_int64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_int64) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_int64)
            )
        );
    }
    test_field_column_int64();
    fn test_field_column_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_name) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_name)
            )
        );
    }
    test_field_column_name();
    fn test_field_column_name16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_name16) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_name16)
            )
        );
    }
    test_field_column_name16();
    fn test_field_column_origin_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_origin_name) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_origin_name)
            )
        );
    }
    test_field_column_origin_name();
    fn test_field_column_origin_name16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_origin_name16) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_origin_name16)
            )
        );
    }
    test_field_column_origin_name16();
    fn test_field_column_table_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_table_name) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_table_name)
            )
        );
    }
    test_field_column_table_name();
    fn test_field_column_table_name16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_table_name16) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_table_name16)
            )
        );
    }
    test_field_column_table_name16();
    fn test_field_column_text() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_text) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_text)
            )
        );
    }
    test_field_column_text();
    fn test_field_column_text16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_text16) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_text16)
            )
        );
    }
    test_field_column_text16();
    fn test_field_column_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_type) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_type)
            )
        );
    }
    test_field_column_type();
    fn test_field_column_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).column_value) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(column_value)
            )
        );
    }
    test_field_column_value();
    fn test_field_commit_hook() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).commit_hook) as usize - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(commit_hook)
            )
        );
    }
    test_field_commit_hook();
    fn test_field_complete() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).complete) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(complete)
            )
        );
    }
    test_field_complete();
    fn test_field_complete16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).complete16) as usize - ptr as usize
            },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(complete16)
            )
        );
    }
    test_field_complete16();
    fn test_field_create_collation() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_collation) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(create_collation)
            )
        );
    }
    test_field_create_collation();
    fn test_field_create_collation16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_collation16) as usize - ptr as usize
            },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(create_collation16)
            )
        );
    }
    test_field_create_collation16();
    fn test_field_create_function() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_function) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(create_function)
            )
        );
    }
    test_field_create_function();
    fn test_field_create_function16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_function16) as usize - ptr as usize
            },
            368usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(create_function16)
            )
        );
    }
    test_field_create_function16();
    fn test_field_create_module() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_module) as usize - ptr as usize
            },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(create_module)
            )
        );
    }
    test_field_create_module();
    fn test_field_data_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data_count) as usize - ptr as usize
            },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(data_count)
            )
        );
    }
    test_field_data_count();
    fn test_field_db_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).db_handle) as usize - ptr as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(db_handle)
            )
        );
    }
    test_field_db_handle();
    fn test_field_declare_vtab() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).declare_vtab) as usize - ptr as usize
            },
            400usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(declare_vtab)
            )
        );
    }
    test_field_declare_vtab();
    fn test_field_enable_shared_cache() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enable_shared_cache) as usize - ptr as usize
            },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(enable_shared_cache)
            )
        );
    }
    test_field_enable_shared_cache();
    fn test_field_errcode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).errcode) as usize - ptr as usize
            },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(errcode)
            )
        );
    }
    test_field_errcode();
    fn test_field_errmsg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).errmsg) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(errmsg)
            )
        );
    }
    test_field_errmsg();
    fn test_field_errmsg16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).errmsg16) as usize - ptr as usize
            },
            432usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(errmsg16)
            )
        );
    }
    test_field_errmsg16();
    fn test_field_exec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).exec) as usize - ptr as usize
            },
            440usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(exec)
            )
        );
    }
    test_field_exec();
    fn test_field_expired() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).expired) as usize - ptr as usize
            },
            448usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(expired)
            )
        );
    }
    test_field_expired();
    fn test_field_finalize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).finalize) as usize - ptr as usize
            },
            456usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(finalize)
            )
        );
    }
    test_field_finalize();
    fn test_field_free() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize
            },
            464usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(free)
            )
        );
    }
    test_field_free();
    fn test_field_free_table() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).free_table) as usize - ptr as usize
            },
            472usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(free_table)
            )
        );
    }
    test_field_free_table();
    fn test_field_get_autocommit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_autocommit) as usize - ptr as usize
            },
            480usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(get_autocommit)
            )
        );
    }
    test_field_get_autocommit();
    fn test_field_get_auxdata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_auxdata) as usize - ptr as usize
            },
            488usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(get_auxdata)
            )
        );
    }
    test_field_get_auxdata();
    fn test_field_get_table() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).get_table) as usize - ptr as usize
            },
            496usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(get_table)
            )
        );
    }
    test_field_get_table();
    fn test_field_global_recover() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_recover) as usize - ptr as usize
            },
            504usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(global_recover)
            )
        );
    }
    test_field_global_recover();
    fn test_field_interruptx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).interruptx) as usize - ptr as usize
            },
            512usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(interruptx)
            )
        );
    }
    test_field_interruptx();
    fn test_field_last_insert_rowid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).last_insert_rowid) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(last_insert_rowid)
            )
        );
    }
    test_field_last_insert_rowid();
    fn test_field_libversion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).libversion) as usize - ptr as usize
            },
            528usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(libversion)
            )
        );
    }
    test_field_libversion();
    fn test_field_libversion_number() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).libversion_number) as usize - ptr as usize
            },
            536usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(libversion_number)
            )
        );
    }
    test_field_libversion_number();
    fn test_field_malloc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).malloc) as usize - ptr as usize
            },
            544usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(malloc)
            )
        );
    }
    test_field_malloc();
    fn test_field_mprintf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mprintf) as usize - ptr as usize
            },
            552usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(mprintf)
            )
        );
    }
    test_field_mprintf();
    fn test_field_open() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize
            },
            560usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(open)
            )
        );
    }
    test_field_open();
    fn test_field_open16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).open16) as usize - ptr as usize
            },
            568usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(open16)
            )
        );
    }
    test_field_open16();
    fn test_field_prepare() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prepare) as usize - ptr as usize
            },
            576usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(prepare)
            )
        );
    }
    test_field_prepare();
    fn test_field_prepare16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prepare16) as usize - ptr as usize
            },
            584usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(prepare16)
            )
        );
    }
    test_field_prepare16();
    fn test_field_profile() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).profile) as usize - ptr as usize
            },
            592usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(profile)
            )
        );
    }
    test_field_profile();
    fn test_field_progress_handler() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).progress_handler) as usize - ptr as usize
            },
            600usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(progress_handler)
            )
        );
    }
    test_field_progress_handler();
    fn test_field_realloc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).realloc) as usize - ptr as usize
            },
            608usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(realloc)
            )
        );
    }
    test_field_realloc();
    fn test_field_reset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reset) as usize - ptr as usize
            },
            616usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(reset)
            )
        );
    }
    test_field_reset();
    fn test_field_result_blob() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_blob) as usize - ptr as usize
            },
            624usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_blob)
            )
        );
    }
    test_field_result_blob();
    fn test_field_result_double() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_double) as usize - ptr as usize
            },
            632usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_double)
            )
        );
    }
    test_field_result_double();
    fn test_field_result_error() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_error) as usize - ptr as usize
            },
            640usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_error)
            )
        );
    }
    test_field_result_error();
    fn test_field_result_error16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_error16) as usize - ptr as usize
            },
            648usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_error16)
            )
        );
    }
    test_field_result_error16();
    fn test_field_result_int() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_int) as usize - ptr as usize
            },
            656usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_int)
            )
        );
    }
    test_field_result_int();
    fn test_field_result_int64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_int64) as usize - ptr as usize
            },
            664usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_int64)
            )
        );
    }
    test_field_result_int64();
    fn test_field_result_null() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_null) as usize - ptr as usize
            },
            672usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_null)
            )
        );
    }
    test_field_result_null();
    fn test_field_result_text() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_text) as usize - ptr as usize
            },
            680usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_text)
            )
        );
    }
    test_field_result_text();
    fn test_field_result_text16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_text16) as usize - ptr as usize
            },
            688usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_text16)
            )
        );
    }
    test_field_result_text16();
    fn test_field_result_text16be() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_text16be) as usize - ptr as usize
            },
            696usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_text16be)
            )
        );
    }
    test_field_result_text16be();
    fn test_field_result_text16le() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_text16le) as usize - ptr as usize
            },
            704usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_text16le)
            )
        );
    }
    test_field_result_text16le();
    fn test_field_result_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_value) as usize - ptr as usize
            },
            712usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_value)
            )
        );
    }
    test_field_result_value();
    fn test_field_rollback_hook() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rollback_hook) as usize - ptr as usize
            },
            720usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(rollback_hook)
            )
        );
    }
    test_field_rollback_hook();
    fn test_field_set_authorizer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_authorizer) as usize - ptr as usize
            },
            728usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(set_authorizer)
            )
        );
    }
    test_field_set_authorizer();
    fn test_field_set_auxdata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_auxdata) as usize - ptr as usize
            },
            736usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(set_auxdata)
            )
        );
    }
    test_field_set_auxdata();
    fn test_field_xsnprintf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xsnprintf) as usize - ptr as usize
            },
            744usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(xsnprintf)
            )
        );
    }
    test_field_xsnprintf();
    fn test_field_step() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).step) as usize - ptr as usize
            },
            752usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(step)
            )
        );
    }
    test_field_step();
    fn test_field_table_column_metadata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).table_column_metadata) as usize - ptr as usize
            },
            760usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(table_column_metadata)
            )
        );
    }
    test_field_table_column_metadata();
    fn test_field_thread_cleanup() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).thread_cleanup) as usize - ptr as usize
            },
            768usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(thread_cleanup)
            )
        );
    }
    test_field_thread_cleanup();
    fn test_field_total_changes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).total_changes) as usize - ptr as usize
            },
            776usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(total_changes)
            )
        );
    }
    test_field_total_changes();
    fn test_field_trace() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trace) as usize - ptr as usize
            },
            784usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(trace)
            )
        );
    }
    test_field_trace();
    fn test_field_transfer_bindings() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).transfer_bindings) as usize - ptr as usize
            },
            792usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(transfer_bindings)
            )
        );
    }
    test_field_transfer_bindings();
    fn test_field_update_hook() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).update_hook) as usize - ptr as usize
            },
            800usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(update_hook)
            )
        );
    }
    test_field_update_hook();
    fn test_field_user_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize
            },
            808usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(user_data)
            )
        );
    }
    test_field_user_data();
    fn test_field_value_blob() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value_blob) as usize - ptr as usize
            },
            816usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(value_blob)
            )
        );
    }
    test_field_value_blob();
    fn test_field_value_bytes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value_bytes) as usize - ptr as usize
            },
            824usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(value_bytes)
            )
        );
    }
    test_field_value_bytes();
    fn test_field_value_bytes16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value_bytes16) as usize - ptr as usize
            },
            832usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(value_bytes16)
            )
        );
    }
    test_field_value_bytes16();
    fn test_field_value_double() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value_double) as usize - ptr as usize
            },
            840usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(value_double)
            )
        );
    }
    test_field_value_double();
    fn test_field_value_int() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value_int) as usize - ptr as usize
            },
            848usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(value_int)
            )
        );
    }
    test_field_value_int();
    fn test_field_value_int64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value_int64) as usize - ptr as usize
            },
            856usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(value_int64)
            )
        );
    }
    test_field_value_int64();
    fn test_field_value_numeric_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value_numeric_type) as usize - ptr as usize
            },
            864usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(value_numeric_type)
            )
        );
    }
    test_field_value_numeric_type();
    fn test_field_value_text() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value_text) as usize - ptr as usize
            },
            872usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(value_text)
            )
        );
    }
    test_field_value_text();
    fn test_field_value_text16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value_text16) as usize - ptr as usize
            },
            880usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(value_text16)
            )
        );
    }
    test_field_value_text16();
    fn test_field_value_text16be() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value_text16be) as usize - ptr as usize
            },
            888usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(value_text16be)
            )
        );
    }
    test_field_value_text16be();
    fn test_field_value_text16le() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value_text16le) as usize - ptr as usize
            },
            896usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(value_text16le)
            )
        );
    }
    test_field_value_text16le();
    fn test_field_value_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value_type) as usize - ptr as usize
            },
            904usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(value_type)
            )
        );
    }
    test_field_value_type();
    fn test_field_vmprintf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vmprintf) as usize - ptr as usize
            },
            912usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(vmprintf)
            )
        );
    }
    test_field_vmprintf();
    fn test_field_overload_function() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).overload_function) as usize - ptr as usize
            },
            920usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(overload_function)
            )
        );
    }
    test_field_overload_function();
    fn test_field_prepare_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prepare_v2) as usize - ptr as usize
            },
            928usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(prepare_v2)
            )
        );
    }
    test_field_prepare_v2();
    fn test_field_prepare16_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prepare16_v2) as usize - ptr as usize
            },
            936usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(prepare16_v2)
            )
        );
    }
    test_field_prepare16_v2();
    fn test_field_clear_bindings() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).clear_bindings) as usize - ptr as usize
            },
            944usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(clear_bindings)
            )
        );
    }
    test_field_clear_bindings();
    fn test_field_create_module_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_module_v2) as usize - ptr as usize
            },
            952usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(create_module_v2)
            )
        );
    }
    test_field_create_module_v2();
    fn test_field_bind_zeroblob() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_zeroblob) as usize - ptr as usize
            },
            960usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(bind_zeroblob)
            )
        );
    }
    test_field_bind_zeroblob();
    fn test_field_blob_bytes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).blob_bytes) as usize - ptr as usize
            },
            968usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(blob_bytes)
            )
        );
    }
    test_field_blob_bytes();
    fn test_field_blob_close() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).blob_close) as usize - ptr as usize
            },
            976usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(blob_close)
            )
        );
    }
    test_field_blob_close();
    fn test_field_blob_open() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).blob_open) as usize - ptr as usize
            },
            984usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(blob_open)
            )
        );
    }
    test_field_blob_open();
    fn test_field_blob_read() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).blob_read) as usize - ptr as usize
            },
            992usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(blob_read)
            )
        );
    }
    test_field_blob_read();
    fn test_field_blob_write() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).blob_write) as usize - ptr as usize
            },
            1000usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(blob_write)
            )
        );
    }
    test_field_blob_write();
    fn test_field_create_collation_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_collation_v2) as usize - ptr as usize
            },
            1008usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(create_collation_v2)
            )
        );
    }
    test_field_create_collation_v2();
    fn test_field_file_control() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).file_control) as usize - ptr as usize
            },
            1016usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(file_control)
            )
        );
    }
    test_field_file_control();
    fn test_field_memory_highwater() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).memory_highwater) as usize - ptr as usize
            },
            1024usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(memory_highwater)
            )
        );
    }
    test_field_memory_highwater();
    fn test_field_memory_used() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).memory_used) as usize - ptr as usize
            },
            1032usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(memory_used)
            )
        );
    }
    test_field_memory_used();
    fn test_field_mutex_alloc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mutex_alloc) as usize - ptr as usize
            },
            1040usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(mutex_alloc)
            )
        );
    }
    test_field_mutex_alloc();
    fn test_field_mutex_enter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mutex_enter) as usize - ptr as usize
            },
            1048usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(mutex_enter)
            )
        );
    }
    test_field_mutex_enter();
    fn test_field_mutex_free() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mutex_free) as usize - ptr as usize
            },
            1056usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(mutex_free)
            )
        );
    }
    test_field_mutex_free();
    fn test_field_mutex_leave() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mutex_leave) as usize - ptr as usize
            },
            1064usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(mutex_leave)
            )
        );
    }
    test_field_mutex_leave();
    fn test_field_mutex_try() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mutex_try) as usize - ptr as usize
            },
            1072usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(mutex_try)
            )
        );
    }
    test_field_mutex_try();
    fn test_field_open_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).open_v2) as usize - ptr as usize
            },
            1080usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(open_v2)
            )
        );
    }
    test_field_open_v2();
    fn test_field_release_memory() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).release_memory) as usize - ptr as usize
            },
            1088usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(release_memory)
            )
        );
    }
    test_field_release_memory();
    fn test_field_result_error_nomem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_error_nomem) as usize - ptr as usize
            },
            1096usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_error_nomem)
            )
        );
    }
    test_field_result_error_nomem();
    fn test_field_result_error_toobig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_error_toobig) as usize - ptr as usize
            },
            1104usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_error_toobig)
            )
        );
    }
    test_field_result_error_toobig();
    fn test_field_sleep() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sleep) as usize - ptr as usize
            },
            1112usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(sleep)
            )
        );
    }
    test_field_sleep();
    fn test_field_soft_heap_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).soft_heap_limit) as usize - ptr as usize
            },
            1120usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(soft_heap_limit)
            )
        );
    }
    test_field_soft_heap_limit();
    fn test_field_vfs_find() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vfs_find) as usize - ptr as usize
            },
            1128usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(vfs_find)
            )
        );
    }
    test_field_vfs_find();
    fn test_field_vfs_register() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vfs_register) as usize - ptr as usize
            },
            1136usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(vfs_register)
            )
        );
    }
    test_field_vfs_register();
    fn test_field_vfs_unregister() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vfs_unregister) as usize - ptr as usize
            },
            1144usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(vfs_unregister)
            )
        );
    }
    test_field_vfs_unregister();
    fn test_field_xthreadsafe() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xthreadsafe) as usize - ptr as usize
            },
            1152usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(xthreadsafe)
            )
        );
    }
    test_field_xthreadsafe();
    fn test_field_result_zeroblob() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_zeroblob) as usize - ptr as usize
            },
            1160usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_zeroblob)
            )
        );
    }
    test_field_result_zeroblob();
    fn test_field_result_error_code() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_error_code) as usize - ptr as usize
            },
            1168usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_error_code)
            )
        );
    }
    test_field_result_error_code();
    fn test_field_test_control() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).test_control) as usize - ptr as usize
            },
            1176usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(test_control)
            )
        );
    }
    test_field_test_control();
    fn test_field_randomness() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).randomness) as usize - ptr as usize
            },
            1184usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(randomness)
            )
        );
    }
    test_field_randomness();
    fn test_field_context_db_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).context_db_handle) as usize - ptr as usize
            },
            1192usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(context_db_handle)
            )
        );
    }
    test_field_context_db_handle();
    fn test_field_extended_result_codes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).extended_result_codes) as usize - ptr as usize
            },
            1200usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(extended_result_codes)
            )
        );
    }
    test_field_extended_result_codes();
    fn test_field_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize
            },
            1208usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(limit)
            )
        );
    }
    test_field_limit();
    fn test_field_next_stmt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next_stmt) as usize - ptr as usize
            },
            1216usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(next_stmt)
            )
        );
    }
    test_field_next_stmt();
    fn test_field_sql() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sql) as usize - ptr as usize
            },
            1224usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(sql)
            )
        );
    }
    test_field_sql();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            1232usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
    fn test_field_backup_finish() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).backup_finish) as usize - ptr as usize
            },
            1240usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(backup_finish)
            )
        );
    }
    test_field_backup_finish();
    fn test_field_backup_init() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).backup_init) as usize - ptr as usize
            },
            1248usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(backup_init)
            )
        );
    }
    test_field_backup_init();
    fn test_field_backup_pagecount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).backup_pagecount) as usize - ptr as usize
            },
            1256usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(backup_pagecount)
            )
        );
    }
    test_field_backup_pagecount();
    fn test_field_backup_remaining() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).backup_remaining) as usize - ptr as usize
            },
            1264usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(backup_remaining)
            )
        );
    }
    test_field_backup_remaining();
    fn test_field_backup_step() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).backup_step) as usize - ptr as usize
            },
            1272usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(backup_step)
            )
        );
    }
    test_field_backup_step();
    fn test_field_compileoption_get() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).compileoption_get) as usize - ptr as usize
            },
            1280usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(compileoption_get)
            )
        );
    }
    test_field_compileoption_get();
    fn test_field_compileoption_used() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).compileoption_used) as usize - ptr as usize
            },
            1288usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(compileoption_used)
            )
        );
    }
    test_field_compileoption_used();
    fn test_field_create_function_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_function_v2) as usize - ptr as usize
            },
            1296usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(create_function_v2)
            )
        );
    }
    test_field_create_function_v2();
    fn test_field_db_config() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).db_config) as usize - ptr as usize
            },
            1304usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(db_config)
            )
        );
    }
    test_field_db_config();
    fn test_field_db_mutex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).db_mutex) as usize - ptr as usize
            },
            1312usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(db_mutex)
            )
        );
    }
    test_field_db_mutex();
    fn test_field_db_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).db_status) as usize - ptr as usize
            },
            1320usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(db_status)
            )
        );
    }
    test_field_db_status();
    fn test_field_extended_errcode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).extended_errcode) as usize - ptr as usize
            },
            1328usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(extended_errcode)
            )
        );
    }
    test_field_extended_errcode();
    fn test_field_log() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize
            },
            1336usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(log)
            )
        );
    }
    test_field_log();
    fn test_field_soft_heap_limit64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).soft_heap_limit64) as usize - ptr as usize
            },
            1344usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(soft_heap_limit64)
            )
        );
    }
    test_field_soft_heap_limit64();
    fn test_field_sourceid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sourceid) as usize - ptr as usize
            },
            1352usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(sourceid)
            )
        );
    }
    test_field_sourceid();
    fn test_field_stmt_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stmt_status) as usize - ptr as usize
            },
            1360usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(stmt_status)
            )
        );
    }
    test_field_stmt_status();
    fn test_field_strnicmp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).strnicmp) as usize - ptr as usize
            },
            1368usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(strnicmp)
            )
        );
    }
    test_field_strnicmp();
    fn test_field_unlock_notify() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unlock_notify) as usize - ptr as usize
            },
            1376usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(unlock_notify)
            )
        );
    }
    test_field_unlock_notify();
    fn test_field_wal_autocheckpoint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wal_autocheckpoint) as usize - ptr as usize
            },
            1384usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(wal_autocheckpoint)
            )
        );
    }
    test_field_wal_autocheckpoint();
    fn test_field_wal_checkpoint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wal_checkpoint) as usize - ptr as usize
            },
            1392usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(wal_checkpoint)
            )
        );
    }
    test_field_wal_checkpoint();
    fn test_field_wal_hook() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wal_hook) as usize - ptr as usize
            },
            1400usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(wal_hook)
            )
        );
    }
    test_field_wal_hook();
    fn test_field_blob_reopen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).blob_reopen) as usize - ptr as usize
            },
            1408usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(blob_reopen)
            )
        );
    }
    test_field_blob_reopen();
    fn test_field_vtab_config() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vtab_config) as usize - ptr as usize
            },
            1416usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(vtab_config)
            )
        );
    }
    test_field_vtab_config();
    fn test_field_vtab_on_conflict() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vtab_on_conflict) as usize - ptr as usize
            },
            1424usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(vtab_on_conflict)
            )
        );
    }
    test_field_vtab_on_conflict();
    fn test_field_close_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).close_v2) as usize - ptr as usize
            },
            1432usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(close_v2)
            )
        );
    }
    test_field_close_v2();
    fn test_field_db_filename() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).db_filename) as usize - ptr as usize
            },
            1440usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(db_filename)
            )
        );
    }
    test_field_db_filename();
    fn test_field_db_readonly() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).db_readonly) as usize - ptr as usize
            },
            1448usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(db_readonly)
            )
        );
    }
    test_field_db_readonly();
    fn test_field_db_release_memory() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).db_release_memory) as usize - ptr as usize
            },
            1456usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(db_release_memory)
            )
        );
    }
    test_field_db_release_memory();
    fn test_field_errstr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).errstr) as usize - ptr as usize
            },
            1464usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(errstr)
            )
        );
    }
    test_field_errstr();
    fn test_field_stmt_busy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stmt_busy) as usize - ptr as usize
            },
            1472usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(stmt_busy)
            )
        );
    }
    test_field_stmt_busy();
    fn test_field_stmt_readonly() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stmt_readonly) as usize - ptr as usize
            },
            1480usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(stmt_readonly)
            )
        );
    }
    test_field_stmt_readonly();
    fn test_field_stricmp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stricmp) as usize - ptr as usize
            },
            1488usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(stricmp)
            )
        );
    }
    test_field_stricmp();
    fn test_field_uri_boolean() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uri_boolean) as usize - ptr as usize
            },
            1496usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(uri_boolean)
            )
        );
    }
    test_field_uri_boolean();
    fn test_field_uri_int64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uri_int64) as usize - ptr as usize
            },
            1504usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(uri_int64)
            )
        );
    }
    test_field_uri_int64();
    fn test_field_uri_parameter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uri_parameter) as usize - ptr as usize
            },
            1512usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(uri_parameter)
            )
        );
    }
    test_field_uri_parameter();
    fn test_field_xvsnprintf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xvsnprintf) as usize - ptr as usize
            },
            1520usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(xvsnprintf)
            )
        );
    }
    test_field_xvsnprintf();
    fn test_field_wal_checkpoint_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wal_checkpoint_v2) as usize - ptr as usize
            },
            1528usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(wal_checkpoint_v2)
            )
        );
    }
    test_field_wal_checkpoint_v2();
    fn test_field_auto_extension() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).auto_extension) as usize - ptr as usize
            },
            1536usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(auto_extension)
            )
        );
    }
    test_field_auto_extension();
    fn test_field_bind_blob64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_blob64) as usize - ptr as usize
            },
            1544usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(bind_blob64)
            )
        );
    }
    test_field_bind_blob64();
    fn test_field_bind_text64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_text64) as usize - ptr as usize
            },
            1552usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(bind_text64)
            )
        );
    }
    test_field_bind_text64();
    fn test_field_cancel_auto_extension() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cancel_auto_extension) as usize - ptr as usize
            },
            1560usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(cancel_auto_extension)
            )
        );
    }
    test_field_cancel_auto_extension();
    fn test_field_load_extension() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).load_extension) as usize - ptr as usize
            },
            1568usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(load_extension)
            )
        );
    }
    test_field_load_extension();
    fn test_field_malloc64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).malloc64) as usize - ptr as usize
            },
            1576usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(malloc64)
            )
        );
    }
    test_field_malloc64();
    fn test_field_msize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).msize) as usize - ptr as usize
            },
            1584usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(msize)
            )
        );
    }
    test_field_msize();
    fn test_field_realloc64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).realloc64) as usize - ptr as usize
            },
            1592usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(realloc64)
            )
        );
    }
    test_field_realloc64();
    fn test_field_reset_auto_extension() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reset_auto_extension) as usize - ptr as usize
            },
            1600usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(reset_auto_extension)
            )
        );
    }
    test_field_reset_auto_extension();
    fn test_field_result_blob64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_blob64) as usize - ptr as usize
            },
            1608usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_blob64)
            )
        );
    }
    test_field_result_blob64();
    fn test_field_result_text64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_text64) as usize - ptr as usize
            },
            1616usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_text64)
            )
        );
    }
    test_field_result_text64();
    fn test_field_strglob() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).strglob) as usize - ptr as usize
            },
            1624usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(strglob)
            )
        );
    }
    test_field_strglob();
    fn test_field_value_dup() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value_dup) as usize - ptr as usize
            },
            1632usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(value_dup)
            )
        );
    }
    test_field_value_dup();
    fn test_field_value_free() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value_free) as usize - ptr as usize
            },
            1640usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(value_free)
            )
        );
    }
    test_field_value_free();
    fn test_field_result_zeroblob64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_zeroblob64) as usize - ptr as usize
            },
            1648usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_zeroblob64)
            )
        );
    }
    test_field_result_zeroblob64();
    fn test_field_bind_zeroblob64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_zeroblob64) as usize - ptr as usize
            },
            1656usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(bind_zeroblob64)
            )
        );
    }
    test_field_bind_zeroblob64();
    fn test_field_value_subtype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value_subtype) as usize - ptr as usize
            },
            1664usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(value_subtype)
            )
        );
    }
    test_field_value_subtype();
    fn test_field_result_subtype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_subtype) as usize - ptr as usize
            },
            1672usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_subtype)
            )
        );
    }
    test_field_result_subtype();
    fn test_field_status64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status64) as usize - ptr as usize
            },
            1680usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(status64)
            )
        );
    }
    test_field_status64();
    fn test_field_strlike() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).strlike) as usize - ptr as usize
            },
            1688usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(strlike)
            )
        );
    }
    test_field_strlike();
    fn test_field_db_cacheflush() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).db_cacheflush) as usize - ptr as usize
            },
            1696usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(db_cacheflush)
            )
        );
    }
    test_field_db_cacheflush();
    fn test_field_system_errno() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system_errno) as usize - ptr as usize
            },
            1704usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(system_errno)
            )
        );
    }
    test_field_system_errno();
    fn test_field_trace_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trace_v2) as usize - ptr as usize
            },
            1712usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(trace_v2)
            )
        );
    }
    test_field_trace_v2();
    fn test_field_expanded_sql() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).expanded_sql) as usize - ptr as usize
            },
            1720usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(expanded_sql)
            )
        );
    }
    test_field_expanded_sql();
    fn test_field_set_last_insert_rowid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).set_last_insert_rowid) as usize - ptr as usize
            },
            1728usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(set_last_insert_rowid)
            )
        );
    }
    test_field_set_last_insert_rowid();
    fn test_field_prepare_v3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prepare_v3) as usize - ptr as usize
            },
            1736usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(prepare_v3)
            )
        );
    }
    test_field_prepare_v3();
    fn test_field_prepare16_v3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prepare16_v3) as usize - ptr as usize
            },
            1744usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(prepare16_v3)
            )
        );
    }
    test_field_prepare16_v3();
    fn test_field_bind_pointer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bind_pointer) as usize - ptr as usize
            },
            1752usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(bind_pointer)
            )
        );
    }
    test_field_bind_pointer();
    fn test_field_result_pointer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_pointer) as usize - ptr as usize
            },
            1760usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(result_pointer)
            )
        );
    }
    test_field_result_pointer();
    fn test_field_value_pointer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value_pointer) as usize - ptr as usize
            },
            1768usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(value_pointer)
            )
        );
    }
    test_field_value_pointer();
    fn test_field_vtab_nochange() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vtab_nochange) as usize - ptr as usize
            },
            1776usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(vtab_nochange)
            )
        );
    }
    test_field_vtab_nochange();
    fn test_field_value_nochange() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value_nochange) as usize - ptr as usize
            },
            1784usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(value_nochange)
            )
        );
    }
    test_field_value_nochange();
    fn test_field_vtab_collation() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vtab_collation) as usize - ptr as usize
            },
            1792usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(vtab_collation)
            )
        );
    }
    test_field_vtab_collation();
    fn test_field_keyword_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).keyword_count) as usize - ptr as usize
            },
            1800usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(keyword_count)
            )
        );
    }
    test_field_keyword_count();
    fn test_field_keyword_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).keyword_name) as usize - ptr as usize
            },
            1808usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(keyword_name)
            )
        );
    }
    test_field_keyword_name();
    fn test_field_keyword_check() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).keyword_check) as usize - ptr as usize
            },
            1816usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(keyword_check)
            )
        );
    }
    test_field_keyword_check();
    fn test_field_str_new() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).str_new) as usize - ptr as usize
            },
            1824usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(str_new)
            )
        );
    }
    test_field_str_new();
    fn test_field_str_finish() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).str_finish) as usize - ptr as usize
            },
            1832usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(str_finish)
            )
        );
    }
    test_field_str_finish();
    fn test_field_str_appendf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).str_appendf) as usize - ptr as usize
            },
            1840usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(str_appendf)
            )
        );
    }
    test_field_str_appendf();
    fn test_field_str_vappendf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).str_vappendf) as usize - ptr as usize
            },
            1848usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(str_vappendf)
            )
        );
    }
    test_field_str_vappendf();
    fn test_field_str_append() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).str_append) as usize - ptr as usize
            },
            1856usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(str_append)
            )
        );
    }
    test_field_str_append();
    fn test_field_str_appendall() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).str_appendall) as usize - ptr as usize
            },
            1864usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(str_appendall)
            )
        );
    }
    test_field_str_appendall();
    fn test_field_str_appendchar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).str_appendchar) as usize - ptr as usize
            },
            1872usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(str_appendchar)
            )
        );
    }
    test_field_str_appendchar();
    fn test_field_str_reset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).str_reset) as usize - ptr as usize
            },
            1880usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(str_reset)
            )
        );
    }
    test_field_str_reset();
    fn test_field_str_errcode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).str_errcode) as usize - ptr as usize
            },
            1888usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(str_errcode)
            )
        );
    }
    test_field_str_errcode();
    fn test_field_str_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).str_length) as usize - ptr as usize
            },
            1896usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(str_length)
            )
        );
    }
    test_field_str_length();
    fn test_field_str_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).str_value) as usize - ptr as usize
            },
            1904usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(str_value)
            )
        );
    }
    test_field_str_value();
    fn test_field_create_window_function() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_window_function) as usize - ptr as usize
            },
            1912usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(create_window_function)
            )
        );
    }
    test_field_create_window_function();
    fn test_field_normalized_sql() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).normalized_sql) as usize - ptr as usize
            },
            1920usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(normalized_sql)
            )
        );
    }
    test_field_normalized_sql();
    fn test_field_stmt_isexplain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stmt_isexplain) as usize - ptr as usize
            },
            1928usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(stmt_isexplain)
            )
        );
    }
    test_field_stmt_isexplain();
    fn test_field_value_frombind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value_frombind) as usize - ptr as usize
            },
            1936usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(value_frombind)
            )
        );
    }
    test_field_value_frombind();
    fn test_field_drop_modules() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).drop_modules) as usize - ptr as usize
            },
            1944usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(drop_modules)
            )
        );
    }
    test_field_drop_modules();
    fn test_field_hard_heap_limit64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hard_heap_limit64) as usize - ptr as usize
            },
            1952usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(hard_heap_limit64)
            )
        );
    }
    test_field_hard_heap_limit64();
    fn test_field_uri_key() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uri_key) as usize - ptr as usize
            },
            1960usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(uri_key)
            )
        );
    }
    test_field_uri_key();
    fn test_field_filename_database() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).filename_database) as usize - ptr as usize
            },
            1968usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(filename_database)
            )
        );
    }
    test_field_filename_database();
    fn test_field_filename_journal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).filename_journal) as usize - ptr as usize
            },
            1976usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(filename_journal)
            )
        );
    }
    test_field_filename_journal();
    fn test_field_filename_wal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).filename_wal) as usize - ptr as usize
            },
            1984usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(filename_wal)
            )
        );
    }
    test_field_filename_wal();
    fn test_field_create_filename() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_filename) as usize - ptr as usize
            },
            1992usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(create_filename)
            )
        );
    }
    test_field_create_filename();
    fn test_field_free_filename() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).free_filename) as usize - ptr as usize
            },
            2000usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(free_filename)
            )
        );
    }
    test_field_free_filename();
    fn test_field_database_file_object() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).database_file_object) as usize - ptr as usize
            },
            2008usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(database_file_object)
            )
        );
    }
    test_field_database_file_object();
    fn test_field_txn_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).txn_state) as usize - ptr as usize
            },
            2016usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(txn_state)
            )
        );
    }
    test_field_txn_state();
    fn test_field_changes64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).changes64) as usize - ptr as usize
            },
            2024usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(changes64)
            )
        );
    }
    test_field_changes64();
    fn test_field_total_changes64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).total_changes64) as usize - ptr as usize
            },
            2032usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(total_changes64)
            )
        );
    }
    test_field_total_changes64();
    fn test_field_autovacuum_pages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).autovacuum_pages) as usize - ptr as usize
            },
            2040usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(autovacuum_pages)
            )
        );
    }
    test_field_autovacuum_pages();
    fn test_field_error_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).error_offset) as usize - ptr as usize
            },
            2048usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(error_offset)
            )
        );
    }
    test_field_error_offset();
    fn test_field_vtab_rhs_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vtab_rhs_value) as usize - ptr as usize
            },
            2056usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(vtab_rhs_value)
            )
        );
    }
    test_field_vtab_rhs_value();
    fn test_field_vtab_distinct() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vtab_distinct) as usize - ptr as usize
            },
            2064usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(vtab_distinct)
            )
        );
    }
    test_field_vtab_distinct();
    fn test_field_vtab_in() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vtab_in) as usize - ptr as usize
            },
            2072usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(vtab_in)
            )
        );
    }
    test_field_vtab_in();
    fn test_field_vtab_in_first() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vtab_in_first) as usize - ptr as usize
            },
            2080usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(vtab_in_first)
            )
        );
    }
    test_field_vtab_in_first();
    fn test_field_vtab_in_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sqlite3_api_routines>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vtab_in_next) as usize - ptr as usize
            },
            2088usize,
            concat!(
                "Offset of field: ",
                stringify!(sqlite3_api_routines),
                "::",
                stringify!(vtab_in_next)
            )
        );
    }
    test_field_vtab_in_next();
}
pub type sqlite3_loadext_entry = ::std::option::Option<
    unsafe extern "C" fn(
        db: *mut sqlite3,
        pzErrMsg: *mut *mut ::std::os::raw::c_char,
        pThunk: *const sqlite3_api_routines,
    ) -> ::std::os::raw::c_int,
>;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    fn test_field_gp_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(gp_offset)
            )
        );
    }
    test_field_gp_offset();
    fn test_field_fp_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(fp_offset)
            )
        );
    }
    test_field_fp_offset();
    fn test_field_overflow_arg_area() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(overflow_arg_area)
            )
        );
    }
    test_field_overflow_arg_area();
    fn test_field_reg_save_area() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(reg_save_area)
            )
        );
    }
    test_field_reg_save_area();
}
